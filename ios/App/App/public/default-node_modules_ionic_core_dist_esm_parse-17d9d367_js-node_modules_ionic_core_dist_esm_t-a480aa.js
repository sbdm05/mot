"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["default-node_modules_ionic_core_dist_esm_parse-17d9d367_js-node_modules_ionic_core_dist_esm_t-a480aa"],{

/***/ 9273:
/*!*************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/index-c4b11676.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ printRequiredElementError),
/* harmony export */   "b": () => (/* binding */ printIonError),
/* harmony export */   "p": () => (/* binding */ printIonWarning)
/* harmony export */ });
/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */

/**
 * Logs a warning to the console with an Ionic prefix
 * to indicate the library that is warning the developer.
 *
 * @param message - The string message to be logged to the console.
 */
const printIonWarning = (message, ...params) => {
  return console.warn(`[Ionic Warning]: ${message}`, ...params);
};
/*
 * Logs an error to the console with an Ionic prefix
 * to indicate the library that is warning the developer.
 *
 * @param message - The string message to be logged to the console.
 * @param params - Additional arguments to supply to the console.error.
 */


const printIonError = (message, ...params) => {
  return console.error(`[Ionic Error]: ${message}`, ...params);
};
/**
 * Prints an error informing developers that an implementation requires an element to be used
 * within a specific selector.
 *
 * @param el The web component element this is requiring the element.
 * @param targetSelectors The selector or selectors that were not found.
 */


const printRequiredElementError = (el, ...targetSelectors) => {
  return console.error(`<${el.tagName.toLowerCase()}> must be used inside ${targetSelectors.join(' or ')}.`);
};



/***/ }),

/***/ 3907:
/*!*************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/parse-17d9d367.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A": () => (/* binding */ isLocaleDayPeriodRTL),
/* harmony export */   "B": () => (/* binding */ getDaysOfWeek),
/* harmony export */   "C": () => (/* binding */ getMonthAndYear),
/* harmony export */   "D": () => (/* binding */ getDaysOfMonth),
/* harmony export */   "E": () => (/* binding */ generateMonths),
/* harmony export */   "F": () => (/* binding */ is24Hour),
/* harmony export */   "G": () => (/* binding */ getLocalizedTime),
/* harmony export */   "H": () => (/* binding */ getMonthAndDay),
/* harmony export */   "I": () => (/* binding */ formatValue),
/* harmony export */   "J": () => (/* binding */ getNextYear),
/* harmony export */   "K": () => (/* binding */ getPreviousYear),
/* harmony export */   "L": () => (/* binding */ clampDate),
/* harmony export */   "M": () => (/* binding */ parseAmPm),
/* harmony export */   "N": () => (/* binding */ calculateHourFromAMPM),
/* harmony export */   "O": () => (/* binding */ getLocalizedDateTime),
/* harmony export */   "P": () => (/* binding */ getMonthDayAndYear),
/* harmony export */   "a": () => (/* binding */ isAfter),
/* harmony export */   "b": () => (/* binding */ isSameDay),
/* harmony export */   "c": () => (/* binding */ getPreviousMonth),
/* harmony export */   "d": () => (/* binding */ getNextMonth),
/* harmony export */   "e": () => (/* binding */ getToday),
/* harmony export */   "f": () => (/* binding */ getPartsFromCalendarDay),
/* harmony export */   "g": () => (/* binding */ generateDayAriaLabel),
/* harmony export */   "h": () => (/* binding */ getEndOfWeek),
/* harmony export */   "i": () => (/* binding */ isBefore),
/* harmony export */   "j": () => (/* binding */ getStartOfWeek),
/* harmony export */   "k": () => (/* binding */ getPreviousDay),
/* harmony export */   "l": () => (/* binding */ getNextDay),
/* harmony export */   "m": () => (/* binding */ getPreviousWeek),
/* harmony export */   "n": () => (/* binding */ getNextWeek),
/* harmony export */   "o": () => (/* binding */ parseMinParts),
/* harmony export */   "p": () => (/* binding */ parseDate),
/* harmony export */   "q": () => (/* binding */ parseMaxParts),
/* harmony export */   "r": () => (/* binding */ convertToArrayOfNumbers),
/* harmony export */   "s": () => (/* binding */ convertDataToISO),
/* harmony export */   "t": () => (/* binding */ getCombinedDateColumnData),
/* harmony export */   "u": () => (/* binding */ getMonthColumnData),
/* harmony export */   "v": () => (/* binding */ getDayColumnData),
/* harmony export */   "w": () => (/* binding */ warnIfValueOutOfBounds),
/* harmony export */   "x": () => (/* binding */ getYearColumnData),
/* harmony export */   "y": () => (/* binding */ isMonthFirstLocale),
/* harmony export */   "z": () => (/* binding */ getTimeColumnsData)
/* harmony export */ });
/* harmony import */ var _index_c4b11676_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-c4b11676.js */ 9273);
/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */

/**
 * Returns true if the selected day is equal to the reference day
 */

const isSameDay = (baseParts, compareParts) => {
  return baseParts.month === compareParts.month && baseParts.day === compareParts.day && baseParts.year === compareParts.year;
};
/**
 * Returns true is the selected day is before the reference day.
 */


const isBefore = (baseParts, compareParts) => {
  return baseParts.year < compareParts.year || baseParts.year === compareParts.year && baseParts.month < compareParts.month || baseParts.year === compareParts.year && baseParts.month === compareParts.month && baseParts.day && baseParts.day < compareParts.day;
};
/**
 * Returns true is the selected day is after the reference day.
 */


const isAfter = (baseParts, compareParts) => {
  return baseParts.year > compareParts.year || baseParts.year === compareParts.year && baseParts.month > compareParts.month || baseParts.year === compareParts.year && baseParts.month === compareParts.month && baseParts.day && baseParts.day > compareParts.day;
};

const warnIfValueOutOfBounds = (value, min, max) => {
  const valueArray = Array.isArray(value) ? value : [value];

  for (const val of valueArray) {
    if (min && isBefore(val, min) || max && isAfter(val, max)) {
      (0,_index_c4b11676_js__WEBPACK_IMPORTED_MODULE_0__.p)('The value provided to ion-datetime is out of bounds.\n\n' + `Min: ${JSON.stringify(min)}\n` + `Max: ${JSON.stringify(max)}\n` + `Value: ${JSON.stringify(value)}`);
      break;
    }
  }
};
/**
 * Determines if given year is a
 * leap year. Returns `true` if year
 * is a leap year. Returns `false`
 * otherwise.
 */


const isLeapYear = year => {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
};

const is24Hour = (locale, hourCycle) => {
  /**
   * If developer has explicitly enabled h23 time
   * then return early and do not look at the system default.
   */
  if (hourCycle !== undefined) {
    return hourCycle === 'h23';
  }
  /**
   * If hourCycle was not specified, check the locale
   * that is set on the user's device. We first check the
   * Intl.DateTimeFormat hourCycle option as developers can encode this
   * option into the locale string. Example: `en-US-u-hc-h23`
   */


  const formatted = new Intl.DateTimeFormat(locale, {
    hour: 'numeric'
  });
  const options = formatted.resolvedOptions();

  if (options.hourCycle !== undefined) {
    return options.hourCycle === 'h23';
  }
  /**
   * If hourCycle is not specified (either through lack
   * of browser support or locale information) then fall
   * back to this slower hourCycle check.
   */


  const date = new Date('5/18/2021 00:00');
  const parts = formatted.formatToParts(date);
  const hour = parts.find(p => p.type === 'hour');

  if (!hour) {
    throw new Error('Hour value not found from DateTimeFormat');
  }

  return hour.value === '00';
};
/**
 * Given a date object, returns the number
 * of days in that month.
 * Month value begin at 1, not 0.
 * i.e. January = month 1.
 */


const getNumDaysInMonth = (month, year) => {
  return month === 4 || month === 6 || month === 9 || month === 11 ? 30 : month === 2 ? isLeapYear(year) ? 29 : 28 : 31;
};
/**
 * Certain locales display month then year while
 * others display year then month.
 * We can use Intl.DateTimeFormat to determine
 * the ordering for each locale.
 * The formatOptions param can be used to customize
 * which pieces of a date to compare against the month
 * with. For example, some locales render dd/mm/yyyy
 * while others render mm/dd/yyyy. This function can be
 * used for variations of the same "month first" check.
 */


const isMonthFirstLocale = (locale, formatOptions = {
  month: 'numeric',
  year: 'numeric'
}) => {
  /**
   * By setting month and year we guarantee that only
   * month, year, and literal (slashes '/', for example)
   * values are included in the formatToParts results.
   *
   * The ordering of the parts will be determined by
   * the locale. So if the month is the first value,
   * then we know month should be shown first. If the
   * year is the first value, then we know year should be shown first.
   *
   * This ordering can be controlled by customizing the locale property.
   */
  const parts = new Intl.DateTimeFormat(locale, formatOptions).formatToParts(new Date());
  return parts[0].type === 'month';
};
/**
 * Determines if the given locale formats the day period (am/pm) to the
 * left or right of the hour.
 * @param locale The locale to check.
 * @returns `true` if the locale formats the day period to the left of the hour.
 */


const isLocaleDayPeriodRTL = locale => {
  const parts = new Intl.DateTimeFormat(locale, {
    hour: 'numeric'
  }).formatToParts(new Date());
  return parts[0].type === 'dayPeriod';
};

const twoDigit = val => {
  return ('0' + (val !== undefined ? Math.abs(val) : '0')).slice(-2);
};

const fourDigit = val => {
  return ('000' + (val !== undefined ? Math.abs(val) : '0')).slice(-4);
};

function convertDataToISO(data) {
  if (Array.isArray(data)) {
    return data.map(parts => convertDataToISO(parts));
  } // https://www.w3.org/TR/NOTE-datetime


  let rtn = '';

  if (data.year !== undefined) {
    // YYYY
    rtn = fourDigit(data.year);

    if (data.month !== undefined) {
      // YYYY-MM
      rtn += '-' + twoDigit(data.month);

      if (data.day !== undefined) {
        // YYYY-MM-DD
        rtn += '-' + twoDigit(data.day);

        if (data.hour !== undefined) {
          // YYYY-MM-DDTHH:mm:SS
          rtn += `T${twoDigit(data.hour)}:${twoDigit(data.minute)}:00`;

          if (data.tzOffset === undefined) {
            // YYYY-MM-DDTHH:mm:SSZ
            rtn += 'Z';
          } else {
            // YYYY-MM-DDTHH:mm:SS+/-HH:mm
            rtn += (data.tzOffset > 0 ? '+' : '-') + twoDigit(Math.floor(Math.abs(data.tzOffset / 60))) + ':' + twoDigit(data.tzOffset % 60);
          }
        }
      }
    }
  } else if (data.hour !== undefined) {
    // HH:mm
    rtn = twoDigit(data.hour) + ':' + twoDigit(data.minute);
  }

  return rtn;
}
/**
 * Converts an 12 hour value to 24 hours.
 */


const convert12HourTo24Hour = (hour, ampm) => {
  if (ampm === undefined) {
    return hour;
  }
  /**
   * If AM and 12am
   * then return 00:00.
   * Otherwise just return
   * the hour since it is
   * already in 24 hour format.
   */


  if (ampm === 'am') {
    if (hour === 12) {
      return 0;
    }

    return hour;
  }
  /**
   * If PM and 12pm
   * just return 12:00
   * since it is already
   * in 24 hour format.
   * Otherwise add 12 hours
   * to the time.
   */


  if (hour === 12) {
    return 12;
  }

  return hour + 12;
};

const getStartOfWeek = refParts => {
  const {
    dayOfWeek
  } = refParts;

  if (dayOfWeek === null || dayOfWeek === undefined) {
    throw new Error('No day of week provided');
  }

  return subtractDays(refParts, dayOfWeek);
};

const getEndOfWeek = refParts => {
  const {
    dayOfWeek
  } = refParts;

  if (dayOfWeek === null || dayOfWeek === undefined) {
    throw new Error('No day of week provided');
  }

  return addDays(refParts, 6 - dayOfWeek);
};

const getNextDay = refParts => {
  return addDays(refParts, 1);
};

const getPreviousDay = refParts => {
  return subtractDays(refParts, 1);
};

const getPreviousWeek = refParts => {
  return subtractDays(refParts, 7);
};

const getNextWeek = refParts => {
  return addDays(refParts, 7);
};
/**
 * Given datetime parts, subtract
 * numDays from the date.
 * Returns a new DatetimeParts object
 * Currently can only go backward at most 1 month.
 */


const subtractDays = (refParts, numDays) => {
  const {
    month,
    day,
    year
  } = refParts;

  if (day === null) {
    throw new Error('No day provided');
  }

  const workingParts = {
    month,
    day,
    year
  };
  workingParts.day = day - numDays;
  /**
   * If wrapping to previous month
   * update days and decrement month
   */

  if (workingParts.day < 1) {
    workingParts.month -= 1;
  }
  /**
   * If moving to previous year, reset
   * month to December and decrement year
   */


  if (workingParts.month < 1) {
    workingParts.month = 12;
    workingParts.year -= 1;
  }
  /**
   * Determine how many days are in the current
   * month
   */


  if (workingParts.day < 1) {
    const daysInMonth = getNumDaysInMonth(workingParts.month, workingParts.year);
    /**
     * Take num days in month and add the
     * number of underflow days. This number will
     * be negative.
     * Example: 1 week before Jan 2, 2021 is
     * December 26, 2021 so:
     * 2 - 7 = -5
     * 31 + (-5) = 26
     */

    workingParts.day = daysInMonth + workingParts.day;
  }

  return workingParts;
};
/**
 * Given datetime parts, add
 * numDays to the date.
 * Returns a new DatetimeParts object
 * Currently can only go forward at most 1 month.
 */


const addDays = (refParts, numDays) => {
  const {
    month,
    day,
    year
  } = refParts;

  if (day === null) {
    throw new Error('No day provided');
  }

  const workingParts = {
    month,
    day,
    year
  };
  const daysInMonth = getNumDaysInMonth(month, year);
  workingParts.day = day + numDays;
  /**
   * If wrapping to next month
   * update days and increment month
   */

  if (workingParts.day > daysInMonth) {
    workingParts.day -= daysInMonth;
    workingParts.month += 1;
  }
  /**
   * If moving to next year, reset
   * month to January and increment year
   */


  if (workingParts.month > 12) {
    workingParts.month = 1;
    workingParts.year += 1;
  }

  return workingParts;
};
/**
 * Given DatetimeParts, generate the previous month.
 */


const getPreviousMonth = refParts => {
  /**
   * If current month is January, wrap backwards
   *  to December of the previous year.
   */
  const month = refParts.month === 1 ? 12 : refParts.month - 1;
  const year = refParts.month === 1 ? refParts.year - 1 : refParts.year;
  const numDaysInMonth = getNumDaysInMonth(month, year);
  const day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;
  return {
    month,
    year,
    day
  };
};
/**
 * Given DatetimeParts, generate the next month.
 */


const getNextMonth = refParts => {
  /**
   * If current month is December, wrap forwards
   *  to January of the next year.
   */
  const month = refParts.month === 12 ? 1 : refParts.month + 1;
  const year = refParts.month === 12 ? refParts.year + 1 : refParts.year;
  const numDaysInMonth = getNumDaysInMonth(month, year);
  const day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;
  return {
    month,
    year,
    day
  };
};

const changeYear = (refParts, yearDelta) => {
  const month = refParts.month;
  const year = refParts.year + yearDelta;
  const numDaysInMonth = getNumDaysInMonth(month, year);
  const day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;
  return {
    month,
    year,
    day
  };
};
/**
 * Given DatetimeParts, generate the previous year.
 */


const getPreviousYear = refParts => {
  return changeYear(refParts, -1);
};
/**
 * Given DatetimeParts, generate the next year.
 */


const getNextYear = refParts => {
  return changeYear(refParts, 1);
};
/**
 * If PM, then internal value should
 * be converted to 24-hr time.
 * Does not apply when public
 * values are already 24-hr time.
 */


const getInternalHourValue = (hour, use24Hour, ampm) => {
  if (use24Hour) {
    return hour;
  }

  return convert12HourTo24Hour(hour, ampm);
};
/**
 * Unless otherwise stated, all month values are
 * 1 indexed instead of the typical 0 index in JS Date.
 * Example:
 *   January = Month 0 when using JS Date
 *   January = Month 1 when using this datetime util
 */

/**
 * Given the current datetime parts and a new AM/PM value
 * calculate what the hour should be in 24-hour time format.
 * Used when toggling the AM/PM segment since we store our hours
 * in 24-hour time format internally.
 */


const calculateHourFromAMPM = (currentParts, newAMPM) => {
  const {
    ampm: currentAMPM,
    hour
  } = currentParts;
  let newHour = hour;
  /**
   * If going from AM --> PM, need to update the
   *
   */

  if (currentAMPM === 'am' && newAMPM === 'pm') {
    newHour = convert12HourTo24Hour(newHour, 'pm');
    /**
     * If going from PM --> AM
     */
  } else if (currentAMPM === 'pm' && newAMPM === 'am') {
    newHour = Math.abs(newHour - 12);
  }

  return newHour;
};

const getFormattedDayPeriod = dayPeriod => {
  if (dayPeriod === undefined) {
    return '';
  }

  return dayPeriod.toUpperCase();
};

const getLocalizedTime = (locale, refParts, use24Hour) => {
  if (refParts.hour === undefined || refParts.minute === undefined) {
    return 'Invalid Time';
  }

  return new Intl.DateTimeFormat(locale, {
    hour: 'numeric',
    minute: 'numeric',
    timeZone: 'UTC',
    hour12: !use24Hour
  }).format(new Date(convertDataToISO(Object.assign(Object.assign({}, refParts), {
    // TODO: FW-1831 will remove the need to manually set the tzOffset to undefined
    tzOffset: undefined
  }))));
};
/**
 * Adds padding to a time value so
 * that it is always 2 digits.
 */


const addTimePadding = value => {
  const valueToString = value.toString();

  if (valueToString.length > 1) {
    return valueToString;
  }

  return `0${valueToString}`;
};
/**
 * Formats the hour value so that it
 * is always 2 digits. Only applies
 * if using 12 hour format.
 */


const getFormattedHour = (hour, use24Hour) => {
  if (!use24Hour) {
    return hour.toString();
  }

  return addTimePadding(hour);
};
/**
 * Generates an aria-label to be read by screen readers
 * given a local, a date, and whether or not that date is
 * today's date.
 */


const generateDayAriaLabel = (locale, today, refParts) => {
  if (refParts.day === null) {
    return null;
  }
  /**
   * MM/DD/YYYY will return midnight in the user's timezone.
   */


  const date = new Date(`${refParts.month}/${refParts.day}/${refParts.year} GMT+0000`);
  const labelString = new Intl.DateTimeFormat(locale, {
    weekday: 'long',
    month: 'long',
    day: 'numeric',
    timeZone: 'UTC'
  }).format(date);
  /**
   * If date is today, prepend "Today" so screen readers indicate
   * that the date is today.
   */

  return today ? `Today, ${labelString}` : labelString;
};
/**
 * Gets the day of the week, month, and day
 * Used for the header in MD mode.
 */


const getMonthAndDay = (locale, refParts) => {
  const date = new Date(`${refParts.month}/${refParts.day}/${refParts.year} GMT+0000`);
  return new Intl.DateTimeFormat(locale, {
    weekday: 'short',
    month: 'short',
    day: 'numeric',
    timeZone: 'UTC'
  }).format(date);
};
/**
 * Given a locale and a date object,
 * return a formatted string that includes
 * the month name and full year.
 * Example: May 2021
 */


const getMonthAndYear = (locale, refParts) => {
  const date = new Date(`${refParts.month}/${refParts.day}/${refParts.year} GMT+0000`);
  return new Intl.DateTimeFormat(locale, {
    month: 'long',
    year: 'numeric',
    timeZone: 'UTC'
  }).format(date);
};
/**
 * Given a locale and a date object,
 * return a formatted string that includes
 * the short month, numeric day, and full year.
 * Example: Apr 22, 2021
 */


const getMonthDayAndYear = (locale, refParts) => {
  return getLocalizedDateTime(locale, refParts, {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  });
};
/**
 * Wrapper function for Intl.DateTimeFormat.
 * Allows developers to apply an allowed format to DatetimeParts.
 * This function also has built in safeguards for older browser bugs
 * with Intl.DateTimeFormat.
 */


const getLocalizedDateTime = (locale, refParts, options) => {
  const timeString = !!refParts.hour && !!refParts.minute ? ` ${refParts.hour}:${refParts.minute}` : '';
  const date = new Date(`${refParts.month}/${refParts.day}/${refParts.year}${timeString} GMT+0000`);
  return new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, options), {
    timeZone: 'UTC'
  })).format(date);
};
/**
 * Gets a localized version of "Today"
 * Falls back to "Today" in English for
 * browsers that do not support RelativeTimeFormat.
 */


const getTodayLabel = locale => {
  if ('RelativeTimeFormat' in Intl) {
    const label = new Intl.RelativeTimeFormat(locale, {
      numeric: 'auto'
    }).format(0, 'day');
    return label.charAt(0).toUpperCase() + label.slice(1);
  } else {
    return 'Today';
  }
};
/**
 * When calling toISOString(), the browser
 * will convert the date to UTC time by either adding
 * or subtracting the time zone offset.
 * To work around this, we need to either add
 * or subtract the time zone offset to the Date
 * object prior to calling toISOString().
 * This allows us to get an ISO string
 * that is in the user's time zone.
 *
 * Example:
 * Time zone offset is 240
 * Meaning: The browser needs to add 240 minutes
 * to the Date object to get UTC time.
 * What Ionic does: We subtract 240 minutes
 * from the Date object. The browser then adds
 * 240 minutes in toISOString(). The result
 * is a time that is in the user's time zone
 * and not UTC.
 *
 * Note: Some timezones include minute adjustments
 * such as 30 or 45 minutes. This is why we use setMinutes
 * instead of setHours.
 * Example: India Standard Time
 * Timezone offset: -330 = -5.5 hours.
 *
 * List of timezones with 30 and 45 minute timezones:
 * https://www.timeanddate.com/time/time-zones-interesting.html
 */


const removeDateTzOffset = date => {
  const tzOffset = date.getTimezoneOffset();
  date.setMinutes(date.getMinutes() - tzOffset);
  return date;
};

const DATE_AM = removeDateTzOffset(new Date('2022T01:00'));
const DATE_PM = removeDateTzOffset(new Date('2022T13:00'));
/**
 * Formats the locale's string representation of the day period (am/pm) for a given
 * ref parts day period.
 *
 * @param locale The locale to format the day period in.
 * @param value The date string, in ISO format.
 * @returns The localized day period (am/pm) representation of the given value.
 */

const getLocalizedDayPeriod = (locale, dayPeriod) => {
  const date = dayPeriod === 'am' ? DATE_AM : DATE_PM;
  const localizedDayPeriod = new Intl.DateTimeFormat(locale, {
    hour: 'numeric',
    timeZone: 'UTC'
  }).formatToParts(date).find(part => part.type === 'dayPeriod');

  if (localizedDayPeriod) {
    return localizedDayPeriod.value;
  }

  return getFormattedDayPeriod(dayPeriod);
};
/**
 * Formats the datetime's value to a string, for use in the native input.
 *
 * @param value The value to format, either an ISO string or an array thereof.
 */


const formatValue = value => {
  return Array.isArray(value) ? value.join(',') : value;
};
/**
 * Returns the current date as
 * an ISO string in the user's
 * time zone.
 */


const getToday = () => {
  /**
   * ion-datetime intentionally does not
   * parse time zones/do automatic time zone
   * conversion when accepting user input.
   * However when we get today's date string,
   * we want it formatted relative to the user's
   * time zone.
   *
   * When calling toISOString(), the browser
   * will convert the date to UTC time by either adding
   * or subtracting the time zone offset.
   * To work around this, we need to either add
   * or subtract the time zone offset to the Date
   * object prior to calling toISOString().
   * This allows us to get an ISO string
   * that is in the user's time zone.
   */
  return removeDateTzOffset(new Date()).toISOString();
};

const minutes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59];
const hour12 = [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
const hour23 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];
/**
 * Given a locale and a mode,
 * return an array with formatted days
 * of the week. iOS should display days
 * such as "Mon" or "Tue".
 * MD should display days such as "M"
 * or "T".
 */

const getDaysOfWeek = (locale, mode, firstDayOfWeek = 0) => {
  /**
   * Nov 1st, 2020 starts on a Sunday.
   * ion-datetime assumes weeks start on Sunday,
   * but is configurable via `firstDayOfWeek`.
   */
  const weekdayFormat = mode === 'ios' ? 'short' : 'narrow';
  const intl = new Intl.DateTimeFormat(locale, {
    weekday: weekdayFormat
  });
  const startDate = new Date('11/01/2020');
  const daysOfWeek = [];
  /**
   * For each day of the week,
   * get the day name.
   */

  for (let i = firstDayOfWeek; i < firstDayOfWeek + 7; i++) {
    const currentDate = new Date(startDate);
    currentDate.setDate(currentDate.getDate() + i);
    daysOfWeek.push(intl.format(currentDate));
  }

  return daysOfWeek;
};
/**
 * Returns an array containing all of the
 * days in a month for a given year. Values are
 * aligned with a week calendar starting on
 * the firstDayOfWeek value (Sunday by default)
 * using null values.
 */


const getDaysOfMonth = (month, year, firstDayOfWeek) => {
  const numDays = getNumDaysInMonth(month, year);
  const firstOfMonth = new Date(`${month}/1/${year}`).getDay();
  /**
   * To get the first day of the month aligned on the correct
   * day of the week, we need to determine how many "filler" days
   * to generate. These filler days as empty/disabled buttons
   * that fill the space of the days of the week before the first
   * of the month.
   *
   * There are two cases here:
   *
   * 1. If firstOfMonth = 4, firstDayOfWeek = 0 then the offset
   * is (4 - (0 + 1)) = 3. Since the offset loop goes from 0 to 3 inclusive,
   * this will generate 4 filler days (0, 1, 2, 3), and then day of week 4 will have
   * the first day of the month.
   *
   * 2. If firstOfMonth = 2, firstDayOfWeek = 4 then the offset
   * is (6 - (4 - 2)) = 4. Since the offset loop goes from 0 to 4 inclusive,
   * this will generate 5 filler days (0, 1, 2, 3, 4), and then day of week 5 will have
   * the first day of the month.
   */

  const offset = firstOfMonth >= firstDayOfWeek ? firstOfMonth - (firstDayOfWeek + 1) : 6 - (firstDayOfWeek - firstOfMonth);
  let days = [];

  for (let i = 1; i <= numDays; i++) {
    days.push({
      day: i,
      dayOfWeek: (offset + i) % 7
    });
  }

  for (let i = 0; i <= offset; i++) {
    days = [{
      day: null,
      dayOfWeek: null
    }, ...days];
  }

  return days;
};
/**
 * Given a local, reference datetime parts and option
 * max/min bound datetime parts, calculate the acceptable
 * hour and minute values according to the bounds and locale.
 */


const generateTime = (refParts, hourCycle = 'h12', minParts, maxParts, hourValues, minuteValues) => {
  const use24Hour = hourCycle === 'h23';
  let processedHours = use24Hour ? hour23 : hour12;
  let processedMinutes = minutes;
  let isAMAllowed = true;
  let isPMAllowed = true;

  if (hourValues) {
    processedHours = processedHours.filter(hour => hourValues.includes(hour));
  }

  if (minuteValues) {
    processedMinutes = processedMinutes.filter(minute => minuteValues.includes(minute));
  }

  if (minParts) {
    /**
     * If ref day is the same as the
     * minimum allowed day, filter hour/minute
     * values according to min hour and minute.
     */
    if (isSameDay(refParts, minParts)) {
      /**
       * Users may not always set the hour/minute for
       * min value (i.e. 2021-06-02) so we should allow
       * all hours/minutes in that case.
       */
      if (minParts.hour !== undefined) {
        processedHours = processedHours.filter(hour => {
          const convertedHour = refParts.ampm === 'pm' ? (hour + 12) % 24 : hour;
          return (use24Hour ? hour : convertedHour) >= minParts.hour;
        });
        isAMAllowed = minParts.hour < 13;
      }

      if (minParts.minute !== undefined) {
        /**
         * The minimum minute range should not be enforced when
         * the hour is greater than the min hour.
         *
         * For example with a minimum range of 09:30, users
         * should be able to select 10:00-10:29 and beyond.
         */
        let isPastMinHour = false;

        if (minParts.hour !== undefined && refParts.hour !== undefined) {
          if (refParts.hour > minParts.hour) {
            isPastMinHour = true;
          }
        }

        processedMinutes = processedMinutes.filter(minute => {
          if (isPastMinHour) {
            return true;
          }

          return minute >= minParts.minute;
        });
      }
      /**
       * If ref day is before minimum
       * day do not render any hours/minute values
       */

    } else if (isBefore(refParts, minParts)) {
      processedHours = [];
      processedMinutes = [];
      isAMAllowed = isPMAllowed = false;
    }
  }

  if (maxParts) {
    /**
     * If ref day is the same as the
     * maximum allowed day, filter hour/minute
     * values according to max hour and minute.
     */
    if (isSameDay(refParts, maxParts)) {
      /**
       * Users may not always set the hour/minute for
       * max value (i.e. 2021-06-02) so we should allow
       * all hours/minutes in that case.
       */
      if (maxParts.hour !== undefined) {
        processedHours = processedHours.filter(hour => {
          const convertedHour = refParts.ampm === 'pm' ? (hour + 12) % 24 : hour;
          return (use24Hour ? hour : convertedHour) <= maxParts.hour;
        });
        isPMAllowed = maxParts.hour >= 13;
      }

      if (maxParts.minute !== undefined && refParts.hour === maxParts.hour) {
        // The available minutes should only be filtered when the hour is the same as the max hour.
        // For example if the max hour is 10:30 and the current hour is 10:00,
        // users should be able to select 00-30 minutes.
        // If the current hour is 09:00, users should be able to select 00-60 minutes.
        processedMinutes = processedMinutes.filter(minute => minute <= maxParts.minute);
      }
      /**
       * If ref day is after minimum
       * day do not render any hours/minute values
       */

    } else if (isAfter(refParts, maxParts)) {
      processedHours = [];
      processedMinutes = [];
      isAMAllowed = isPMAllowed = false;
    }
  }

  return {
    hours: processedHours,
    minutes: processedMinutes,
    am: isAMAllowed,
    pm: isPMAllowed
  };
};
/**
 * Given DatetimeParts, generate the previous,
 * current, and and next months.
 */


const generateMonths = refParts => {
  return [getPreviousMonth(refParts), {
    month: refParts.month,
    year: refParts.year,
    day: refParts.day
  }, getNextMonth(refParts)];
};

const getMonthColumnData = (locale, refParts, minParts, maxParts, monthValues, formatOptions = {
  month: 'long'
}) => {
  const {
    year
  } = refParts;
  const months = [];

  if (monthValues !== undefined) {
    let processedMonths = monthValues;

    if ((maxParts === null || maxParts === void 0 ? void 0 : maxParts.month) !== undefined) {
      processedMonths = processedMonths.filter(month => month <= maxParts.month);
    }

    if ((minParts === null || minParts === void 0 ? void 0 : minParts.month) !== undefined) {
      processedMonths = processedMonths.filter(month => month >= minParts.month);
    }

    processedMonths.forEach(processedMonth => {
      const date = new Date(`${processedMonth}/1/${year} GMT+0000`);
      const monthString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), {
        timeZone: 'UTC'
      })).format(date);
      months.push({
        text: monthString,
        value: processedMonth
      });
    });
  } else {
    const maxMonth = maxParts && maxParts.year === year ? maxParts.month : 12;
    const minMonth = minParts && minParts.year === year ? minParts.month : 1;

    for (let i = minMonth; i <= maxMonth; i++) {
      /**
       *
       * There is a bug on iOS 14 where
       * Intl.DateTimeFormat takes into account
       * the local timezone offset when formatting dates.
       *
       * Forcing the timezone to 'UTC' fixes the issue. However,
       * we should keep this workaround as it is safer. In the event
       * this breaks in another browser, we will not be impacted
       * because all dates will be interpreted in UTC.
       *
       * Example:
       * new Intl.DateTimeFormat('en-US', { month: 'long' }).format(new Date('Sat Apr 01 2006 00:00:00 GMT-0400 (EDT)')) // "March"
       * new Intl.DateTimeFormat('en-US', { month: 'long', timeZone: 'UTC' }).format(new Date('Sat Apr 01 2006 00:00:00 GMT-0400 (EDT)')) // "April"
       *
       * In certain timezones, iOS 14 shows the wrong
       * date for .toUTCString(). To combat this, we
       * force all of the timezones to GMT+0000 (UTC).
       *
       * Example:
       * Time Zone: Central European Standard Time
       * new Date('1/1/1992').toUTCString() // "Tue, 31 Dec 1991 23:00:00 GMT"
       * new Date('1/1/1992 GMT+0000').toUTCString() // "Wed, 01 Jan 1992 00:00:00 GMT"
       */
      const date = new Date(`${i}/1/${year} GMT+0000`);
      const monthString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), {
        timeZone: 'UTC'
      })).format(date);
      months.push({
        text: monthString,
        value: i
      });
    }
  }

  return months;
};
/**
 * Returns information regarding
 * selectable dates (i.e 1st, 2nd, 3rd, etc)
 * within a reference month.
 * @param locale The locale to format the date with
 * @param refParts The reference month/year to generate dates for
 * @param minParts The minimum bound on the date that can be returned
 * @param maxParts The maximum bound on the date that can be returned
 * @param dayValues The allowed date values
 * @returns Date data to be used in ion-picker-column-internal
 */


const getDayColumnData = (locale, refParts, minParts, maxParts, dayValues, formatOptions = {
  day: 'numeric'
}) => {
  const {
    month,
    year
  } = refParts;
  const days = [];
  /**
   * If we have max/min bounds that in the same
   * month/year as the refParts, we should
   * use the define day as the max/min day.
   * Otherwise, fallback to the max/min days in a month.
   */

  const numDaysInMonth = getNumDaysInMonth(month, year);
  const maxDay = (maxParts === null || maxParts === void 0 ? void 0 : maxParts.day) && maxParts.year === year && maxParts.month === month ? maxParts.day : numDaysInMonth;
  const minDay = (minParts === null || minParts === void 0 ? void 0 : minParts.day) && minParts.year === year && minParts.month === month ? minParts.day : 1;

  if (dayValues !== undefined) {
    let processedDays = dayValues;
    processedDays = processedDays.filter(day => day >= minDay && day <= maxDay);
    processedDays.forEach(processedDay => {
      const date = new Date(`${month}/${processedDay}/${year} GMT+0000`);
      const dayString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), {
        timeZone: 'UTC'
      })).format(date);
      days.push({
        text: dayString,
        value: processedDay
      });
    });
  } else {
    for (let i = minDay; i <= maxDay; i++) {
      const date = new Date(`${month}/${i}/${year} GMT+0000`);
      const dayString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), {
        timeZone: 'UTC'
      })).format(date);
      days.push({
        text: dayString,
        value: i
      });
    }
  }

  return days;
};

const getYearColumnData = (refParts, minParts, maxParts, yearValues) => {
  let processedYears = [];

  if (yearValues !== undefined) {
    processedYears = yearValues;

    if ((maxParts === null || maxParts === void 0 ? void 0 : maxParts.year) !== undefined) {
      processedYears = processedYears.filter(year => year <= maxParts.year);
    }

    if ((minParts === null || minParts === void 0 ? void 0 : minParts.year) !== undefined) {
      processedYears = processedYears.filter(year => year >= minParts.year);
    }
  } else {
    const {
      year
    } = refParts;
    const maxYear = (maxParts === null || maxParts === void 0 ? void 0 : maxParts.year) || year;
    const minYear = (minParts === null || minParts === void 0 ? void 0 : minParts.year) || year - 100;

    for (let i = maxYear; i >= minYear; i--) {
      processedYears.push(i);
    }
  }

  return processedYears.map(year => ({
    text: `${year}`,
    value: year
  }));
};
/**
 * Given a starting date and an upper bound,
 * this functions returns an array of all
 * month objects in that range.
 */


const getAllMonthsInRange = (currentParts, maxParts) => {
  if (currentParts.month === maxParts.month && currentParts.year === maxParts.year) {
    return [currentParts];
  }

  return [currentParts, ...getAllMonthsInRange(getNextMonth(currentParts), maxParts)];
};
/**
 * Creates and returns picker items
 * that represent the days in a month.
 * Example: "Thu, Jun 2"
 */


const getCombinedDateColumnData = (locale, refParts, todayParts, minParts, maxParts, dayValues, monthValues) => {
  let items = [];
  let parts = [];
  /**
   * Get all month objects from the min date
   * to the max date. Note: Do not use getMonthColumnData
   * as that function only generates dates within a
   * single year.
   */

  let months = getAllMonthsInRange(minParts, maxParts);
  /**
   * Filter out any disallowed month values.
   */

  if (monthValues) {
    months = months.filter(({
      month
    }) => monthValues.includes(month));
  }
  /**
   * Get all of the days in the month.
   * From there, generate an array where
   * each item has the month, date, and day
   * of work as the text.
   */


  months.forEach(monthObject => {
    const referenceMonth = {
      month: monthObject.month,
      day: null,
      year: refParts.year
    };
    const monthDays = getDayColumnData(locale, referenceMonth, minParts, maxParts, dayValues, {
      month: 'short',
      day: 'numeric',
      weekday: 'short'
    });
    const dateParts = [];
    const dateColumnItems = [];
    monthDays.forEach(dayObject => {
      const isToday = isSameDay(Object.assign(Object.assign({}, referenceMonth), {
        day: dayObject.value
      }), todayParts);
      /**
       * Today's date should read as "Today" (localized)
       * not the actual date string
       */

      dateColumnItems.push({
        text: isToday ? getTodayLabel(locale) : dayObject.text,
        value: `${refParts.year}-${monthObject.month}-${dayObject.value}`
      });
      /**
       * When selecting a date in the wheel picker
       * we need access to the raw datetime parts data.
       * The picker column only accepts values of
       * type string or number, so we need to return
       * two sets of data: A data set to be passed
       * to the picker column, and a data set to
       * be used to reference the raw data when
       * updating the picker column value.
       */

      dateParts.push({
        month: monthObject.month,
        year: refParts.year,
        day: dayObject.value
      });
    });
    parts = [...parts, ...dateParts];
    items = [...items, ...dateColumnItems];
  });
  return {
    parts,
    items
  };
};

const getTimeColumnsData = (locale, refParts, hourCycle, minParts, maxParts, allowedHourValues, allowedMinuteVaues) => {
  const use24Hour = is24Hour(locale, hourCycle);
  const {
    hours,
    minutes,
    am,
    pm
  } = generateTime(refParts, use24Hour ? 'h23' : 'h12', minParts, maxParts, allowedHourValues, allowedMinuteVaues);
  const hoursItems = hours.map(hour => {
    return {
      text: getFormattedHour(hour, use24Hour),
      value: getInternalHourValue(hour, use24Hour, refParts.ampm)
    };
  });
  const minutesItems = minutes.map(minute => {
    return {
      text: addTimePadding(minute),
      value: minute
    };
  });
  const dayPeriodItems = [];

  if (am && !use24Hour) {
    dayPeriodItems.push({
      text: getLocalizedDayPeriod(locale, 'am'),
      value: 'am'
    });
  }

  if (pm && !use24Hour) {
    dayPeriodItems.push({
      text: getLocalizedDayPeriod(locale, 'pm'),
      value: 'pm'
    });
  }

  return {
    minutesData: minutesItems,
    hoursData: hoursItems,
    dayPeriodData: dayPeriodItems
  };
};

const ISO_8601_REGEXP = // eslint-disable-next-line no-useless-escape
/^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/; // eslint-disable-next-line no-useless-escape

const TIME_REGEXP = /^((\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/;
/**
 * Use to convert a string of comma separated numbers or
 * an array of numbers, and clean up any user input
 */

const convertToArrayOfNumbers = input => {
  if (input === undefined) {
    return;
  }

  let processedInput = input;

  if (typeof input === 'string') {
    // convert the string to an array of strings
    // auto remove any whitespace and [] characters
    processedInput = input.replace(/\[|\]|\s/g, '').split(',');
  }

  let values;

  if (Array.isArray(processedInput)) {
    // ensure each value is an actual number in the returned array
    values = processedInput.map(num => parseInt(num, 10)).filter(isFinite);
  } else {
    values = [processedInput];
  }

  return values;
};
/**
 * Extracts date information
 * from a .calendar-day element
 * into DatetimeParts.
 */


const getPartsFromCalendarDay = el => {
  return {
    month: parseInt(el.getAttribute('data-month'), 10),
    day: parseInt(el.getAttribute('data-day'), 10),
    year: parseInt(el.getAttribute('data-year'), 10),
    dayOfWeek: parseInt(el.getAttribute('data-day-of-week'), 10)
  };
};

function parseDate(val) {
  if (Array.isArray(val)) {
    return val.map(valStr => parseDate(valStr));
  } // manually parse IS0 cuz Date.parse cannot be trusted
  // ISO 8601 format: 1994-12-15T13:47:20Z


  let parse = null;

  if (val != null && val !== '') {
    // try parsing for just time first, HH:MM
    parse = TIME_REGEXP.exec(val);

    if (parse) {
      // adjust the array so it fits nicely with the datetime parse
      parse.unshift(undefined, undefined);
      parse[2] = parse[3] = undefined;
    } else {
      // try parsing for full ISO datetime
      parse = ISO_8601_REGEXP.exec(val);
    }
  }

  if (parse === null) {
    // wasn't able to parse the ISO datetime
    return undefined;
  } // ensure all the parse values exist with at least 0


  for (let i = 1; i < 8; i++) {
    parse[i] = parse[i] !== undefined ? parseInt(parse[i], 10) : undefined;
  }

  let tzOffset = 0;

  if (parse[9] && parse[10]) {
    // hours
    tzOffset = parseInt(parse[10], 10) * 60;

    if (parse[11]) {
      // minutes
      tzOffset += parseInt(parse[11], 10);
    }

    if (parse[9] === '-') {
      // + or -
      tzOffset *= -1;
    }
  } // can also get second and millisecond from parse[6] and parse[7] if needed


  return {
    year: parse[1],
    month: parse[2],
    day: parse[3],
    hour: parse[4],
    minute: parse[5],
    tzOffset
  };
}

const clampDate = (dateParts, minParts, maxParts) => {
  if (minParts && isBefore(dateParts, minParts)) {
    return minParts;
  } else if (maxParts && isAfter(dateParts, maxParts)) {
    return maxParts;
  }

  return dateParts;
};
/**
 * Parses an hour and returns if the value is in the morning (am) or afternoon (pm).
 * @param hour The hour to format, should be 0-23
 * @returns `pm` if the hour is greater than or equal to 12, `am` if less than 12.
 */


const parseAmPm = hour => {
  return hour >= 12 ? 'pm' : 'am';
};
/**
 * Takes a max date string and creates a DatetimeParts
 * object, filling in any missing information.
 * For example, max="2012" would fill in the missing
 * month, day, hour, and minute information.
 */


const parseMaxParts = (max, todayParts) => {
  const {
    month,
    day,
    year,
    hour,
    minute
  } = parseDate(max);
  /**
   * When passing in `max` or `min`, developers
   * can pass in any ISO-8601 string. This means
   * that not all of the date/time fields are defined.
   * For example, passing max="2012" is valid even though
   * there is no month, day, hour, or minute data.
   * However, all of this data is required when clamping the date
   * so that the correct initial value can be selected. As a result,
   * we need to fill in any omitted data with the min or max values.
   */

  const yearValue = year !== null && year !== void 0 ? year : todayParts.year;
  const monthValue = month !== null && month !== void 0 ? month : 12;
  return {
    month: monthValue,
    day: day !== null && day !== void 0 ? day : getNumDaysInMonth(monthValue, yearValue),

    /**
     * Passing in "HH:mm" is a valid ISO-8601
     * string, so we just default to the current year
     * in this case.
     */
    year: yearValue,
    hour: hour !== null && hour !== void 0 ? hour : 23,
    minute: minute !== null && minute !== void 0 ? minute : 59
  };
};
/**
 * Takes a min date string and creates a DatetimeParts
 * object, filling in any missing information.
 * For example, min="2012" would fill in the missing
 * month, day, hour, and minute information.
 */


const parseMinParts = (min, todayParts) => {
  const {
    month,
    day,
    year,
    hour,
    minute
  } = parseDate(min);
  /**
   * When passing in `max` or `min`, developers
   * can pass in any ISO-8601 string. This means
   * that not all of the date/time fields are defined.
   * For example, passing max="2012" is valid even though
   * there is no month, day, hour, or minute data.
   * However, all of this data is required when clamping the date
   * so that the correct initial value can be selected. As a result,
   * we need to fill in any omitted data with the min or max values.
   */

  return {
    month: month !== null && month !== void 0 ? month : 1,
    day: day !== null && day !== void 0 ? day : 1,

    /**
     * Passing in "HH:mm" is a valid ISO-8601
     * string, so we just default to the current year
     * in this case.
     */
    year: year !== null && year !== void 0 ? year : todayParts.year,
    hour: hour !== null && hour !== void 0 ? hour : 0,
    minute: minute !== null && minute !== void 0 ? minute : 0
  };
};



/***/ }),

/***/ 320:
/*!*************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/theme-7670341c.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => (/* binding */ createColorClasses),
/* harmony export */   "g": () => (/* binding */ getClassMap),
/* harmony export */   "h": () => (/* binding */ hostContext),
/* harmony export */   "o": () => (/* binding */ openURL)
/* harmony export */ });
/* harmony import */ var _Users_macbookpro_Documents_agence_projetsApp_app_front_back_motivation_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);


/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */
const hostContext = (selector, el) => {
  return el.closest(selector) !== null;
};
/**
 * Create the mode and color classes for the component based on the classes passed in
 */


const createColorClasses = (color, cssClassMap) => {
  return typeof color === 'string' && color.length > 0 ? Object.assign({
    'ion-color': true,
    [`ion-color-${color}`]: true
  }, cssClassMap) : cssClassMap;
};

const getClassList = classes => {
  if (classes !== undefined) {
    const array = Array.isArray(classes) ? classes : classes.split(' ');
    return array.filter(c => c != null).map(c => c.trim()).filter(c => c !== '');
  }

  return [];
};

const getClassMap = classes => {
  const map = {};
  getClassList(classes).forEach(c => map[c] = true);
  return map;
};

const SCHEME = /^[a-z][a-z0-9+\-.]*:/;

const openURL = /*#__PURE__*/function () {
  var _ref = (0,_Users_macbookpro_Documents_agence_projetsApp_app_front_back_motivation_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (url, ev, direction, animation) {
    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {
      const router = document.querySelector('ion-router');

      if (router) {
        if (ev != null) {
          ev.preventDefault();
        }

        return router.push(url, direction, animation);
      }
    }

    return false;
  });

  return function openURL(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1ub2RlX21vZHVsZXNfaW9uaWNfY29yZV9kaXN0X2VzbV9wYXJzZS0xN2Q5ZDM2N19qcy1ub2RlX21vZHVsZXNfaW9uaWNfY29yZV9kaXN0X2VzbV90LWE0ODBhYS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsZUFBZSxHQUFHLENBQUNDLE9BQUQsRUFBVSxHQUFHQyxNQUFiLEtBQXdCO0VBQzlDLE9BQU9DLE9BQU8sQ0FBQ0MsSUFBUixDQUFjLG9CQUFtQkgsT0FBUSxFQUF6QyxFQUE0QyxHQUFHQyxNQUEvQyxDQUFQO0FBQ0QsQ0FGRDtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxNQUFNRyxhQUFhLEdBQUcsQ0FBQ0osT0FBRCxFQUFVLEdBQUdDLE1BQWIsS0FBd0I7RUFDNUMsT0FBT0MsT0FBTyxDQUFDRyxLQUFSLENBQWUsa0JBQWlCTCxPQUFRLEVBQXhDLEVBQTJDLEdBQUdDLE1BQTlDLENBQVA7QUFDRCxDQUZEO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLE1BQU1LLHlCQUF5QixHQUFHLENBQUNDLEVBQUQsRUFBSyxHQUFHQyxlQUFSLEtBQTRCO0VBQzVELE9BQU9OLE9BQU8sQ0FBQ0csS0FBUixDQUFlLElBQUdFLEVBQUUsQ0FBQ0UsT0FBSCxDQUFXQyxXQUFYLEVBQXlCLHlCQUF3QkYsZUFBZSxDQUFDRyxJQUFoQixDQUFxQixNQUFyQixDQUE2QixHQUFoRyxDQUFQO0FBQ0QsQ0FGRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNSSxTQUFTLEdBQUcsQ0FBQ0MsU0FBRCxFQUFZQyxZQUFaLEtBQTZCO0VBQzdDLE9BQVFELFNB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NE4sWUFBWSxDQUFDQyxPQUFELENBQVosQ0FBc0IzRyxPQUF0QixDQUErQjhFLENBQUQsSUFBUWhNLEdBQUcsQ0FBQ2dNLENBQUQsQ0FBSCxHQUFTLElBQS9DO0VBQ0EsT0FBT2hNLEdBQVA7QUFDRCxDQUpEOztBQUtBLE1BQU1pTyxNQUFNLEdBQUcsc0JBQWY7O0FBQ0EsTUFBTUMsT0FBTztFQUFBLDBMQUFHLFdBQU9DLEdBQVAsRUFBWUMsRUFBWixFQUFnQkMsU0FBaEIsRUFBMkJDLFNBQTNCLEVBQXlDO0lBQ3ZELElBQUlILEdBQUcsSUFBSSxJQUFQLElBQWVBLEdBQUcsQ0FBQyxDQUFELENBQUgsS0FBVyxHQUExQixJQUFpQyxDQUFDRixNQUFNLENBQUNNLElBQVAsQ0FBWUosR0FBWixDQUF0QyxFQUF3RDtNQUN0RCxNQUFNSyxNQUFNLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixZQUF2QixDQUFmOztNQUNBLElBQUlGLE1BQUosRUFBWTtRQUNWLElBQUlKLEVBQUUsSUFBSSxJQUFWLEVBQWdCO1VBQ2RBLEVBQUUsQ0FBQ08sY0FBSDtRQUNEOztRQUNELE9BQU9ILE1BQU0sQ0FBQ2pKLElBQVAsQ0FBWTRJLEdBQVosRUFBaUJFLFNBQWpCLEVBQTRCQyxTQUE1QixDQUFQO01BQ0Q7SUFDRjs7SUFDRCxPQUFPLEtBQVA7RUFDRCxDQVhZOztFQUFBLGdCQUFQSixPQUFPO0lBQUE7RUFBQTtBQUFBLEdBQWIiLCJzb3VyY2VzIjpbIi4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL2luZGV4LWM0YjExNjc2LmpzIiwiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20vcGFyc2UtMTdkOWQzNjcuanMiLCIuL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS90aGVtZS03NjcwMzQxYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuLyoqXG4gKiBMb2dzIGEgd2FybmluZyB0byB0aGUgY29uc29sZSB3aXRoIGFuIElvbmljIHByZWZpeFxuICogdG8gaW5kaWNhdGUgdGhlIGxpYnJhcnkgdGhhdCBpcyB3YXJuaW5nIHRoZSBkZXZlbG9wZXIuXG4gKlxuICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgc3RyaW5nIG1lc3NhZ2UgdG8gYmUgbG9nZ2VkIHRvIHRoZSBjb25zb2xlLlxuICovXG5jb25zdCBwcmludElvbldhcm5pbmcgPSAobWVzc2FnZSwgLi4ucGFyYW1zKSA9PiB7XG4gIHJldHVybiBjb25zb2xlLndhcm4oYFtJb25pYyBXYXJuaW5nXTogJHttZXNzYWdlfWAsIC4uLnBhcmFtcyk7XG59O1xuLypcbiAqIExvZ3MgYW4gZXJyb3IgdG8gdGhlIGNvbnNvbGUgd2l0aCBhbiBJb25pYyBwcmVmaXhcbiAqIHRvIGluZGljYXRlIHRoZSBsaWJyYXJ5IHRoYXQgaXMgd2FybmluZyB0aGUgZGV2ZWxvcGVyLlxuICpcbiAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIHN0cmluZyBtZXNzYWdlIHRvIGJlIGxvZ2dlZCB0byB0aGUgY29uc29sZS5cbiAqIEBwYXJhbSBwYXJhbXMgLSBBZGRpdGlvbmFsIGFyZ3VtZW50cyB0byBzdXBwbHkgdG8gdGhlIGNvbnNvbGUuZXJyb3IuXG4gKi9cbmNvbnN0IHByaW50SW9uRXJyb3IgPSAobWVzc2FnZSwgLi4ucGFyYW1zKSA9PiB7XG4gIHJldHVybiBjb25zb2xlLmVycm9yKGBbSW9uaWMgRXJyb3JdOiAke21lc3NhZ2V9YCwgLi4ucGFyYW1zKTtcbn07XG4vKipcbiAqIFByaW50cyBhbiBlcnJvciBpbmZvcm1pbmcgZGV2ZWxvcGVycyB0aGF0IGFuIGltcGxlbWVudGF0aW9uIHJlcXVpcmVzIGFuIGVsZW1lbnQgdG8gYmUgdXNlZFxuICogd2l0aGluIGEgc3BlY2lmaWMgc2VsZWN0b3IuXG4gKlxuICogQHBhcmFtIGVsIFRoZSB3ZWIgY29tcG9uZW50IGVsZW1lbnQgdGhpcyBpcyByZXF1aXJpbmcgdGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0gdGFyZ2V0U2VsZWN0b3JzIFRoZSBzZWxlY3RvciBvciBzZWxlY3RvcnMgdGhhdCB3ZXJlIG5vdCBmb3VuZC5cbiAqL1xuY29uc3QgcHJpbnRSZXF1aXJlZEVsZW1lbnRFcnJvciA9IChlbCwgLi4udGFyZ2V0U2VsZWN0b3JzKSA9PiB7XG4gIHJldHVybiBjb25zb2xlLmVycm9yKGA8JHtlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCl9PiBtdXN0IGJlIHVzZWQgaW5zaWRlICR7dGFyZ2V0U2VsZWN0b3JzLmpvaW4oJyBvciAnKX0uYCk7XG59O1xuXG5leHBvcnQgeyBwcmludFJlcXVpcmVkRWxlbWVudEVycm9yIGFzIGEsIHByaW50SW9uRXJyb3IgYXMgYiwgcHJpbnRJb25XYXJuaW5nIGFzIHAgfTtcbiIsIi8qIVxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxuICovXG5pbXBvcnQgeyBwIGFzIHByaW50SW9uV2FybmluZyB9IGZyb20gJy4vaW5kZXgtYzRiMTE2NzYuanMnO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc2VsZWN0ZWQgZGF5IGlzIGVxdWFsIHRvIHRoZSByZWZlcmVuY2UgZGF5XG4gKi9cbmNvbnN0IGlzU2FtZURheSA9IChiYXNlUGFydHMsIGNvbXBhcmVQYXJ0cykgPT4ge1xuICByZXR1cm4gKGJhc2VQYXJ0cy5tb250aCA9PT0gY29tcGFyZVBhcnRzLm1vbnRoICYmIGJhc2VQYXJ0cy5kYXkgPT09IGNvbXBhcmVQYXJ0cy5kYXkgJiYgYmFzZVBhcnRzLnllYXIgPT09IGNvbXBhcmVQYXJ0cy55ZWFyKTtcbn07XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpcyB0aGUgc2VsZWN0ZWQgZGF5IGlzIGJlZm9yZSB0aGUgcmVmZXJlbmNlIGRheS5cbiAqL1xuY29uc3QgaXNCZWZvcmUgPSAoYmFzZVBhcnRzLCBjb21wYXJlUGFydHMpID0+IHtcbiAgcmV0dXJuIChiYXNlUGFydHMueWVhciA8IGNvbXBhcmVQYXJ0cy55ZWFyIHx8XG4gICAgKGJhc2VQYXJ0cy55ZWFyID09PSBjb21wYXJlUGFydHMueWVhciAmJiBiYXNlUGFydHMubW9udGggPCBjb21wYXJlUGFydHMubW9udGgpIHx8XG4gICAgKGJhc2VQYXJ0cy55ZWFyID09PSBjb21wYXJlUGFydHMueWVhciAmJlxuICAgICAgYmFzZVBhcnRzLm1vbnRoID09PSBjb21wYXJlUGFydHMubW9udGggJiZcbiAgICAgIGJhc2VQYXJ0cy5kYXkgJiZcbiAgICAgIGJhc2VQYXJ0cy5kYXkgPCBjb21wYXJlUGFydHMuZGF5KSk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaXMgdGhlIHNlbGVjdGVkIGRheSBpcyBhZnRlciB0aGUgcmVmZXJlbmNlIGRheS5cbiAqL1xuY29uc3QgaXNBZnRlciA9IChiYXNlUGFydHMsIGNvbXBhcmVQYXJ0cykgPT4ge1xuICByZXR1cm4gKGJhc2VQYXJ0cy55ZWFyID4gY29tcGFyZVBhcnRzLnllYXIgfHxcbiAgICAoYmFzZVBhcnRzLnllYXIgPT09IGNvbXBhcmVQYXJ0cy55ZWFyICYmIGJhc2VQYXJ0cy5tb250aCA+IGNvbXBhcmVQYXJ0cy5tb250aCkgfHxcbiAgICAoYmFzZVBhcnRzLnllYXIgPT09IGNvbXBhcmVQYXJ0cy55ZWFyICYmXG4gICAgICBiYXNlUGFydHMubW9udGggPT09IGNvbXBhcmVQYXJ0cy5tb250aCAmJlxuICAgICAgYmFzZVBhcnRzLmRheSAmJlxuICAgICAgYmFzZVBhcnRzLmRheSA+IGNvbXBhcmVQYXJ0cy5kYXkpKTtcbn07XG5jb25zdCB3YXJuSWZWYWx1ZU91dE9mQm91bmRzID0gKHZhbHVlLCBtaW4sIG1heCkgPT4ge1xuICBjb25zdCB2YWx1ZUFycmF5ID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gIGZvciAoY29uc3QgdmFsIG9mIHZhbHVlQXJyYXkpIHtcbiAgICBpZiAoKG1pbiAmJiBpc0JlZm9yZSh2YWwsIG1pbikpIHx8IChtYXggJiYgaXNBZnRlcih2YWwsIG1heCkpKSB7XG4gICAgICBwcmludElvbldhcm5pbmcoJ1RoZSB2YWx1ZSBwcm92aWRlZCB0byBpb24tZGF0ZXRpbWUgaXMgb3V0IG9mIGJvdW5kcy5cXG5cXG4nICtcbiAgICAgICAgYE1pbjogJHtKU09OLnN0cmluZ2lmeShtaW4pfVxcbmAgK1xuICAgICAgICBgTWF4OiAke0pTT04uc3RyaW5naWZ5KG1heCl9XFxuYCArXG4gICAgICAgIGBWYWx1ZTogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBnaXZlbiB5ZWFyIGlzIGFcbiAqIGxlYXAgeWVhci4gUmV0dXJucyBgdHJ1ZWAgaWYgeWVhclxuICogaXMgYSBsZWFwIHllYXIuIFJldHVybnMgYGZhbHNlYFxuICogb3RoZXJ3aXNlLlxuICovXG5jb25zdCBpc0xlYXBZZWFyID0gKHllYXIpID0+IHtcbiAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xufTtcbmNvbnN0IGlzMjRIb3VyID0gKGxvY2FsZSwgaG91ckN5Y2xlKSA9PiB7XG4gIC8qKlxuICAgKiBJZiBkZXZlbG9wZXIgaGFzIGV4cGxpY2l0bHkgZW5hYmxlZCBoMjMgdGltZVxuICAgKiB0aGVuIHJldHVybiBlYXJseSBhbmQgZG8gbm90IGxvb2sgYXQgdGhlIHN5c3RlbSBkZWZhdWx0LlxuICAgKi9cbiAgaWYgKGhvdXJDeWNsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGhvdXJDeWNsZSA9PT0gJ2gyMyc7XG4gIH1cbiAgLyoqXG4gICAqIElmIGhvdXJDeWNsZSB3YXMgbm90IHNwZWNpZmllZCwgY2hlY2sgdGhlIGxvY2FsZVxuICAgKiB0aGF0IGlzIHNldCBvbiB0aGUgdXNlcidzIGRldmljZS4gV2UgZmlyc3QgY2hlY2sgdGhlXG4gICAqIEludGwuRGF0ZVRpbWVGb3JtYXQgaG91ckN5Y2xlIG9wdGlvbiBhcyBkZXZlbG9wZXJzIGNhbiBlbmNvZGUgdGhpc1xuICAgKiBvcHRpb24gaW50byB0aGUgbG9jYWxlIHN0cmluZy4gRXhhbXBsZTogYGVuLVVTLXUtaGMtaDIzYFxuICAgKi9cbiAgY29uc3QgZm9ybWF0dGVkID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7IGhvdXI6ICdudW1lcmljJyB9KTtcbiAgY29uc3Qgb3B0aW9ucyA9IGZvcm1hdHRlZC5yZXNvbHZlZE9wdGlvbnMoKTtcbiAgaWYgKG9wdGlvbnMuaG91ckN5Y2xlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5ob3VyQ3ljbGUgPT09ICdoMjMnO1xuICB9XG4gIC8qKlxuICAgKiBJZiBob3VyQ3ljbGUgaXMgbm90IHNwZWNpZmllZCAoZWl0aGVyIHRocm91Z2ggbGFja1xuICAgKiBvZiBicm93c2VyIHN1cHBvcnQgb3IgbG9jYWxlIGluZm9ybWF0aW9uKSB0aGVuIGZhbGxcbiAgICogYmFjayB0byB0aGlzIHNsb3dlciBob3VyQ3ljbGUgY2hlY2suXG4gICAqL1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoJzUvMTgvMjAyMSAwMDowMCcpO1xuICBjb25zdCBwYXJ0cyA9IGZvcm1hdHRlZC5mb3JtYXRUb1BhcnRzKGRhdGUpO1xuICBjb25zdCBob3VyID0gcGFydHMuZmluZCgocCkgPT4gcC50eXBlID09PSAnaG91cicpO1xuICBpZiAoIWhvdXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0hvdXIgdmFsdWUgbm90IGZvdW5kIGZyb20gRGF0ZVRpbWVGb3JtYXQnKTtcbiAgfVxuICByZXR1cm4gaG91ci52YWx1ZSA9PT0gJzAwJztcbn07XG4vKipcbiAqIEdpdmVuIGEgZGF0ZSBvYmplY3QsIHJldHVybnMgdGhlIG51bWJlclxuICogb2YgZGF5cyBpbiB0aGF0IG1vbnRoLlxuICogTW9udGggdmFsdWUgYmVnaW4gYXQgMSwgbm90IDAuXG4gKiBpLmUuIEphbnVhcnkgPSBtb250aCAxLlxuICovXG5jb25zdCBnZXROdW1EYXlzSW5Nb250aCA9IChtb250aCwgeWVhcikgPT4ge1xuICByZXR1cm4gbW9udGggPT09IDQgfHwgbW9udGggPT09IDYgfHwgbW9udGggPT09IDkgfHwgbW9udGggPT09IDExXG4gICAgPyAzMFxuICAgIDogbW9udGggPT09IDJcbiAgICAgID8gaXNMZWFwWWVhcih5ZWFyKVxuICAgICAgICA/IDI5XG4gICAgICAgIDogMjhcbiAgICAgIDogMzE7XG59O1xuLyoqXG4gKiBDZXJ0YWluIGxvY2FsZXMgZGlzcGxheSBtb250aCB0aGVuIHllYXIgd2hpbGVcbiAqIG90aGVycyBkaXNwbGF5IHllYXIgdGhlbiBtb250aC5cbiAqIFdlIGNhbiB1c2UgSW50bC5EYXRlVGltZUZvcm1hdCB0byBkZXRlcm1pbmVcbiAqIHRoZSBvcmRlcmluZyBmb3IgZWFjaCBsb2NhbGUuXG4gKiBUaGUgZm9ybWF0T3B0aW9ucyBwYXJhbSBjYW4gYmUgdXNlZCB0byBjdXN0b21pemVcbiAqIHdoaWNoIHBpZWNlcyBvZiBhIGRhdGUgdG8gY29tcGFyZSBhZ2FpbnN0IHRoZSBtb250aFxuICogd2l0aC4gRm9yIGV4YW1wbGUsIHNvbWUgbG9jYWxlcyByZW5kZXIgZGQvbW0veXl5eVxuICogd2hpbGUgb3RoZXJzIHJlbmRlciBtbS9kZC95eXl5LiBUaGlzIGZ1bmN0aW9uIGNhbiBiZVxuICogdXNlZCBmb3IgdmFyaWF0aW9ucyBvZiB0aGUgc2FtZSBcIm1vbnRoIGZpcnN0XCIgY2hlY2suXG4gKi9cbmNvbnN0IGlzTW9udGhGaXJzdExvY2FsZSA9IChsb2NhbGUsIGZvcm1hdE9wdGlvbnMgPSB7XG4gIG1vbnRoOiAnbnVtZXJpYycsXG4gIHllYXI6ICdudW1lcmljJyxcbn0pID0+IHtcbiAgLyoqXG4gICAqIEJ5IHNldHRpbmcgbW9udGggYW5kIHllYXIgd2UgZ3VhcmFudGVlIHRoYXQgb25seVxuICAgKiBtb250aCwgeWVhciwgYW5kIGxpdGVyYWwgKHNsYXNoZXMgJy8nLCBmb3IgZXhhbXBsZSlcbiAgICogdmFsdWVzIGFyZSBpbmNsdWRlZCBpbiB0aGUgZm9ybWF0VG9QYXJ0cyByZXN1bHRzLlxuICAgKlxuICAgKiBUaGUgb3JkZXJpbmcgb2YgdGhlIHBhcnRzIHdpbGwgYmUgZGV0ZXJtaW5lZCBieVxuICAgKiB0aGUgbG9jYWxlLiBTbyBpZiB0aGUgbW9udGggaXMgdGhlIGZpcnN0IHZhbHVlLFxuICAgKiB0aGVuIHdlIGtub3cgbW9udGggc2hvdWxkIGJlIHNob3duIGZpcnN0LiBJZiB0aGVcbiAgICogeWVhciBpcyB0aGUgZmlyc3QgdmFsdWUsIHRoZW4gd2Uga25vdyB5ZWFyIHNob3VsZCBiZSBzaG93biBmaXJzdC5cbiAgICpcbiAgICogVGhpcyBvcmRlcmluZyBjYW4gYmUgY29udHJvbGxlZCBieSBjdXN0b21pemluZyB0aGUgbG9jYWxlIHByb3BlcnR5LlxuICAgKi9cbiAgY29uc3QgcGFydHMgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIGZvcm1hdE9wdGlvbnMpLmZvcm1hdFRvUGFydHMobmV3IERhdGUoKSk7XG4gIHJldHVybiBwYXJ0c1swXS50eXBlID09PSAnbW9udGgnO1xufTtcbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgZ2l2ZW4gbG9jYWxlIGZvcm1hdHMgdGhlIGRheSBwZXJpb2QgKGFtL3BtKSB0byB0aGVcbiAqIGxlZnQgb3IgcmlnaHQgb2YgdGhlIGhvdXIuXG4gKiBAcGFyYW0gbG9jYWxlIFRoZSBsb2NhbGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGxvY2FsZSBmb3JtYXRzIHRoZSBkYXkgcGVyaW9kIHRvIHRoZSBsZWZ0IG9mIHRoZSBob3VyLlxuICovXG5jb25zdCBpc0xvY2FsZURheVBlcmlvZFJUTCA9IChsb2NhbGUpID0+IHtcbiAgY29uc3QgcGFydHMgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIHsgaG91cjogJ251bWVyaWMnIH0pLmZvcm1hdFRvUGFydHMobmV3IERhdGUoKSk7XG4gIHJldHVybiBwYXJ0c1swXS50eXBlID09PSAnZGF5UGVyaW9kJztcbn07XG5cbmNvbnN0IHR3b0RpZ2l0ID0gKHZhbCkgPT4ge1xuICByZXR1cm4gKCcwJyArICh2YWwgIT09IHVuZGVmaW5lZCA/IE1hdGguYWJzKHZhbCkgOiAnMCcpKS5zbGljZSgtMik7XG59O1xuY29uc3QgZm91ckRpZ2l0ID0gKHZhbCkgPT4ge1xuICByZXR1cm4gKCcwMDAnICsgKHZhbCAhPT0gdW5kZWZpbmVkID8gTWF0aC5hYnModmFsKSA6ICcwJykpLnNsaWNlKC00KTtcbn07XG5mdW5jdGlvbiBjb252ZXJ0RGF0YVRvSVNPKGRhdGEpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICByZXR1cm4gZGF0YS5tYXAoKHBhcnRzKSA9PiBjb252ZXJ0RGF0YVRvSVNPKHBhcnRzKSk7XG4gIH1cbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL05PVEUtZGF0ZXRpbWVcbiAgbGV0IHJ0biA9ICcnO1xuICBpZiAoZGF0YS55ZWFyICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBZWVlZXG4gICAgcnRuID0gZm91ckRpZ2l0KGRhdGEueWVhcik7XG4gICAgaWYgKGRhdGEubW9udGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gWVlZWS1NTVxuICAgICAgcnRuICs9ICctJyArIHR3b0RpZ2l0KGRhdGEubW9udGgpO1xuICAgICAgaWYgKGRhdGEuZGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gWVlZWS1NTS1ERFxuICAgICAgICBydG4gKz0gJy0nICsgdHdvRGlnaXQoZGF0YS5kYXkpO1xuICAgICAgICBpZiAoZGF0YS5ob3VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyBZWVlZLU1NLUREVEhIOm1tOlNTXG4gICAgICAgICAgcnRuICs9IGBUJHt0d29EaWdpdChkYXRhLmhvdXIpfToke3R3b0RpZ2l0KGRhdGEubWludXRlKX06MDBgO1xuICAgICAgICAgIGlmIChkYXRhLnR6T2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIFlZWVktTU0tRERUSEg6bW06U1NaXG4gICAgICAgICAgICBydG4gKz0gJ1onO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFlZWVktTU0tRERUSEg6bW06U1MrLy1ISDptbVxuICAgICAgICAgICAgcnRuICs9XG4gICAgICAgICAgICAgIChkYXRhLnR6T2Zmc2V0ID4gMCA/ICcrJyA6ICctJykgK1xuICAgICAgICAgICAgICAgIHR3b0RpZ2l0KE1hdGguZmxvb3IoTWF0aC5hYnMoZGF0YS50ek9mZnNldCAvIDYwKSkpICtcbiAgICAgICAgICAgICAgICAnOicgK1xuICAgICAgICAgICAgICAgIHR3b0RpZ2l0KGRhdGEudHpPZmZzZXQgJSA2MCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKGRhdGEuaG91ciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gSEg6bW1cbiAgICBydG4gPSB0d29EaWdpdChkYXRhLmhvdXIpICsgJzonICsgdHdvRGlnaXQoZGF0YS5taW51dGUpO1xuICB9XG4gIHJldHVybiBydG47XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIDEyIGhvdXIgdmFsdWUgdG8gMjQgaG91cnMuXG4gKi9cbmNvbnN0IGNvbnZlcnQxMkhvdXJUbzI0SG91ciA9IChob3VyLCBhbXBtKSA9PiB7XG4gIGlmIChhbXBtID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gaG91cjtcbiAgfVxuICAvKipcbiAgICogSWYgQU0gYW5kIDEyYW1cbiAgICogdGhlbiByZXR1cm4gMDA6MDAuXG4gICAqIE90aGVyd2lzZSBqdXN0IHJldHVyblxuICAgKiB0aGUgaG91ciBzaW5jZSBpdCBpc1xuICAgKiBhbHJlYWR5IGluIDI0IGhvdXIgZm9ybWF0LlxuICAgKi9cbiAgaWYgKGFtcG0gPT09ICdhbScpIHtcbiAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gaG91cjtcbiAgfVxuICAvKipcbiAgICogSWYgUE0gYW5kIDEycG1cbiAgICoganVzdCByZXR1cm4gMTI6MDBcbiAgICogc2luY2UgaXQgaXMgYWxyZWFkeVxuICAgKiBpbiAyNCBob3VyIGZvcm1hdC5cbiAgICogT3RoZXJ3aXNlIGFkZCAxMiBob3Vyc1xuICAgKiB0byB0aGUgdGltZS5cbiAgICovXG4gIGlmIChob3VyID09PSAxMikge1xuICAgIHJldHVybiAxMjtcbiAgfVxuICByZXR1cm4gaG91ciArIDEyO1xufTtcbmNvbnN0IGdldFN0YXJ0T2ZXZWVrID0gKHJlZlBhcnRzKSA9PiB7XG4gIGNvbnN0IHsgZGF5T2ZXZWVrIH0gPSByZWZQYXJ0cztcbiAgaWYgKGRheU9mV2VlayA9PT0gbnVsbCB8fCBkYXlPZldlZWsgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gZGF5IG9mIHdlZWsgcHJvdmlkZWQnKTtcbiAgfVxuICByZXR1cm4gc3VidHJhY3REYXlzKHJlZlBhcnRzLCBkYXlPZldlZWspO1xufTtcbmNvbnN0IGdldEVuZE9mV2VlayA9IChyZWZQYXJ0cykgPT4ge1xuICBjb25zdCB7IGRheU9mV2VlayB9ID0gcmVmUGFydHM7XG4gIGlmIChkYXlPZldlZWsgPT09IG51bGwgfHwgZGF5T2ZXZWVrID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGRheSBvZiB3ZWVrIHByb3ZpZGVkJyk7XG4gIH1cbiAgcmV0dXJuIGFkZERheXMocmVmUGFydHMsIDYgLSBkYXlPZldlZWspO1xufTtcbmNvbnN0IGdldE5leHREYXkgPSAocmVmUGFydHMpID0+IHtcbiAgcmV0dXJuIGFkZERheXMocmVmUGFydHMsIDEpO1xufTtcbmNvbnN0IGdldFByZXZpb3VzRGF5ID0gKHJlZlBhcnRzKSA9PiB7XG4gIHJldHVybiBzdWJ0cmFjdERheXMocmVmUGFydHMsIDEpO1xufTtcbmNvbnN0IGdldFByZXZpb3VzV2VlayA9IChyZWZQYXJ0cykgPT4ge1xuICByZXR1cm4gc3VidHJhY3REYXlzKHJlZlBhcnRzLCA3KTtcbn07XG5jb25zdCBnZXROZXh0V2VlayA9IChyZWZQYXJ0cykgPT4ge1xuICByZXR1cm4gYWRkRGF5cyhyZWZQYXJ0cywgNyk7XG59O1xuLyoqXG4gKiBHaXZlbiBkYXRldGltZSBwYXJ0cywgc3VidHJhY3RcbiAqIG51bURheXMgZnJvbSB0aGUgZGF0ZS5cbiAqIFJldHVybnMgYSBuZXcgRGF0ZXRpbWVQYXJ0cyBvYmplY3RcbiAqIEN1cnJlbnRseSBjYW4gb25seSBnbyBiYWNrd2FyZCBhdCBtb3N0IDEgbW9udGguXG4gKi9cbmNvbnN0IHN1YnRyYWN0RGF5cyA9IChyZWZQYXJ0cywgbnVtRGF5cykgPT4ge1xuICBjb25zdCB7IG1vbnRoLCBkYXksIHllYXIgfSA9IHJlZlBhcnRzO1xuICBpZiAoZGF5ID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBkYXkgcHJvdmlkZWQnKTtcbiAgfVxuICBjb25zdCB3b3JraW5nUGFydHMgPSB7XG4gICAgbW9udGgsXG4gICAgZGF5LFxuICAgIHllYXIsXG4gIH07XG4gIHdvcmtpbmdQYXJ0cy5kYXkgPSBkYXkgLSBudW1EYXlzO1xuICAvKipcbiAgICogSWYgd3JhcHBpbmcgdG8gcHJldmlvdXMgbW9udGhcbiAgICogdXBkYXRlIGRheXMgYW5kIGRlY3JlbWVudCBtb250aFxuICAgKi9cbiAgaWYgKHdvcmtpbmdQYXJ0cy5kYXkgPCAxKSB7XG4gICAgd29ya2luZ1BhcnRzLm1vbnRoIC09IDE7XG4gIH1cbiAgLyoqXG4gICAqIElmIG1vdmluZyB0byBwcmV2aW91cyB5ZWFyLCByZXNldFxuICAgKiBtb250aCB0byBEZWNlbWJlciBhbmQgZGVjcmVtZW50IHllYXJcbiAgICovXG4gIGlmICh3b3JraW5nUGFydHMubW9udGggPCAxKSB7XG4gICAgd29ya2luZ1BhcnRzLm1vbnRoID0gMTI7XG4gICAgd29ya2luZ1BhcnRzLnllYXIgLT0gMTtcbiAgfVxuICAvKipcbiAgICogRGV0ZXJtaW5lIGhvdyBtYW55IGRheXMgYXJlIGluIHRoZSBjdXJyZW50XG4gICAqIG1vbnRoXG4gICAqL1xuICBpZiAod29ya2luZ1BhcnRzLmRheSA8IDEpIHtcbiAgICBjb25zdCBkYXlzSW5Nb250aCA9IGdldE51bURheXNJbk1vbnRoKHdvcmtpbmdQYXJ0cy5tb250aCwgd29ya2luZ1BhcnRzLnllYXIpO1xuICAgIC8qKlxuICAgICAqIFRha2UgbnVtIGRheXMgaW4gbW9udGggYW5kIGFkZCB0aGVcbiAgICAgKiBudW1iZXIgb2YgdW5kZXJmbG93IGRheXMuIFRoaXMgbnVtYmVyIHdpbGxcbiAgICAgKiBiZSBuZWdhdGl2ZS5cbiAgICAgKiBFeGFtcGxlOiAxIHdlZWsgYmVmb3JlIEphbiAyLCAyMDIxIGlzXG4gICAgICogRGVjZW1iZXIgMjYsIDIwMjEgc286XG4gICAgICogMiAtIDcgPSAtNVxuICAgICAqIDMxICsgKC01KSA9IDI2XG4gICAgICovXG4gICAgd29ya2luZ1BhcnRzLmRheSA9IGRheXNJbk1vbnRoICsgd29ya2luZ1BhcnRzLmRheTtcbiAgfVxuICByZXR1cm4gd29ya2luZ1BhcnRzO1xufTtcbi8qKlxuICogR2l2ZW4gZGF0ZXRpbWUgcGFydHMsIGFkZFxuICogbnVtRGF5cyB0byB0aGUgZGF0ZS5cbiAqIFJldHVybnMgYSBuZXcgRGF0ZXRpbWVQYXJ0cyBvYmplY3RcbiAqIEN1cnJlbnRseSBjYW4gb25seSBnbyBmb3J3YXJkIGF0IG1vc3QgMSBtb250aC5cbiAqL1xuY29uc3QgYWRkRGF5cyA9IChyZWZQYXJ0cywgbnVtRGF5cykgPT4ge1xuICBjb25zdCB7IG1vbnRoLCBkYXksIHllYXIgfSA9IHJlZlBhcnRzO1xuICBpZiAoZGF5ID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBkYXkgcHJvdmlkZWQnKTtcbiAgfVxuICBjb25zdCB3b3JraW5nUGFydHMgPSB7XG4gICAgbW9udGgsXG4gICAgZGF5LFxuICAgIHllYXIsXG4gIH07XG4gIGNvbnN0IGRheXNJbk1vbnRoID0gZ2V0TnVtRGF5c0luTW9udGgobW9udGgsIHllYXIpO1xuICB3b3JraW5nUGFydHMuZGF5ID0gZGF5ICsgbnVtRGF5cztcbiAgLyoqXG4gICAqIElmIHdyYXBwaW5nIHRvIG5leHQgbW9udGhcbiAgICogdXBkYXRlIGRheXMgYW5kIGluY3JlbWVudCBtb250aFxuICAgKi9cbiAgaWYgKHdvcmtpbmdQYXJ0cy5kYXkgPiBkYXlzSW5Nb250aCkge1xuICAgIHdvcmtpbmdQYXJ0cy5kYXkgLT0gZGF5c0luTW9udGg7XG4gICAgd29ya2luZ1BhcnRzLm1vbnRoICs9IDE7XG4gIH1cbiAgLyoqXG4gICAqIElmIG1vdmluZyB0byBuZXh0IHllYXIsIHJlc2V0XG4gICAqIG1vbnRoIHRvIEphbnVhcnkgYW5kIGluY3JlbWVudCB5ZWFyXG4gICAqL1xuICBpZiAod29ya2luZ1BhcnRzLm1vbnRoID4gMTIpIHtcbiAgICB3b3JraW5nUGFydHMubW9udGggPSAxO1xuICAgIHdvcmtpbmdQYXJ0cy55ZWFyICs9IDE7XG4gIH1cbiAgcmV0dXJuIHdvcmtpbmdQYXJ0cztcbn07XG4vKipcbiAqIEdpdmVuIERhdGV0aW1lUGFydHMsIGdlbmVyYXRlIHRoZSBwcmV2aW91cyBtb250aC5cbiAqL1xuY29uc3QgZ2V0UHJldmlvdXNNb250aCA9IChyZWZQYXJ0cykgPT4ge1xuICAvKipcbiAgICogSWYgY3VycmVudCBtb250aCBpcyBKYW51YXJ5LCB3cmFwIGJhY2t3YXJkc1xuICAgKiAgdG8gRGVjZW1iZXIgb2YgdGhlIHByZXZpb3VzIHllYXIuXG4gICAqL1xuICBjb25zdCBtb250aCA9IHJlZlBhcnRzLm1vbnRoID09PSAxID8gMTIgOiByZWZQYXJ0cy5tb250aCAtIDE7XG4gIGNvbnN0IHllYXIgPSByZWZQYXJ0cy5tb250aCA9PT0gMSA/IHJlZlBhcnRzLnllYXIgLSAxIDogcmVmUGFydHMueWVhcjtcbiAgY29uc3QgbnVtRGF5c0luTW9udGggPSBnZXROdW1EYXlzSW5Nb250aChtb250aCwgeWVhcik7XG4gIGNvbnN0IGRheSA9IG51bURheXNJbk1vbnRoIDwgcmVmUGFydHMuZGF5ID8gbnVtRGF5c0luTW9udGggOiByZWZQYXJ0cy5kYXk7XG4gIHJldHVybiB7IG1vbnRoLCB5ZWFyLCBkYXkgfTtcbn07XG4vKipcbiAqIEdpdmVuIERhdGV0aW1lUGFydHMsIGdlbmVyYXRlIHRoZSBuZXh0IG1vbnRoLlxuICovXG5jb25zdCBnZXROZXh0TW9udGggPSAocmVmUGFydHMpID0+IHtcbiAgLyoqXG4gICAqIElmIGN1cnJlbnQgbW9udGggaXMgRGVjZW1iZXIsIHdyYXAgZm9yd2FyZHNcbiAgICogIHRvIEphbnVhcnkgb2YgdGhlIG5leHQgeWVhci5cbiAgICovXG4gIGNvbnN0IG1vbnRoID0gcmVmUGFydHMubW9udGggPT09IDEyID8gMSA6IHJlZlBhcnRzLm1vbnRoICsgMTtcbiAgY29uc3QgeWVhciA9IHJlZlBhcnRzLm1vbnRoID09PSAxMiA/IHJlZlBhcnRzLnllYXIgKyAxIDogcmVmUGFydHMueWVhcjtcbiAgY29uc3QgbnVtRGF5c0luTW9udGggPSBnZXROdW1EYXlzSW5Nb250aChtb250aCwgeWVhcik7XG4gIGNvbnN0IGRheSA9IG51bURheXNJbk1vbnRoIDwgcmVmUGFydHMuZGF5ID8gbnVtRGF5c0luTW9udGggOiByZWZQYXJ0cy5kYXk7XG4gIHJldHVybiB7IG1vbnRoLCB5ZWFyLCBkYXkgfTtcbn07XG5jb25zdCBjaGFuZ2VZZWFyID0gKHJlZlBhcnRzLCB5ZWFyRGVsdGEpID0+IHtcbiAgY29uc3QgbW9udGggPSByZWZQYXJ0cy5tb250aDtcbiAgY29uc3QgeWVhciA9IHJlZlBhcnRzLnllYXIgKyB5ZWFyRGVsdGE7XG4gIGNvbnN0IG51bURheXNJbk1vbnRoID0gZ2V0TnVtRGF5c0luTW9udGgobW9udGgsIHllYXIpO1xuICBjb25zdCBkYXkgPSBudW1EYXlzSW5Nb250aCA8IHJlZlBhcnRzLmRheSA/IG51bURheXNJbk1vbnRoIDogcmVmUGFydHMuZGF5O1xuICByZXR1cm4geyBtb250aCwgeWVhciwgZGF5IH07XG59O1xuLyoqXG4gKiBHaXZlbiBEYXRldGltZVBhcnRzLCBnZW5lcmF0ZSB0aGUgcHJldmlvdXMgeWVhci5cbiAqL1xuY29uc3QgZ2V0UHJldmlvdXNZZWFyID0gKHJlZlBhcnRzKSA9PiB7XG4gIHJldHVybiBjaGFuZ2VZZWFyKHJlZlBhcnRzLCAtMSk7XG59O1xuLyoqXG4gKiBHaXZlbiBEYXRldGltZVBhcnRzLCBnZW5lcmF0ZSB0aGUgbmV4dCB5ZWFyLlxuICovXG5jb25zdCBnZXROZXh0WWVhciA9IChyZWZQYXJ0cykgPT4ge1xuICByZXR1cm4gY2hhbmdlWWVhcihyZWZQYXJ0cywgMSk7XG59O1xuLyoqXG4gKiBJZiBQTSwgdGhlbiBpbnRlcm5hbCB2YWx1ZSBzaG91bGRcbiAqIGJlIGNvbnZlcnRlZCB0byAyNC1ociB0aW1lLlxuICogRG9lcyBub3QgYXBwbHkgd2hlbiBwdWJsaWNcbiAqIHZhbHVlcyBhcmUgYWxyZWFkeSAyNC1ociB0aW1lLlxuICovXG5jb25zdCBnZXRJbnRlcm5hbEhvdXJWYWx1ZSA9IChob3VyLCB1c2UyNEhvdXIsIGFtcG0pID0+IHtcbiAgaWYgKHVzZTI0SG91cikge1xuICAgIHJldHVybiBob3VyO1xuICB9XG4gIHJldHVybiBjb252ZXJ0MTJIb3VyVG8yNEhvdXIoaG91ciwgYW1wbSk7XG59O1xuLyoqXG4gKiBVbmxlc3Mgb3RoZXJ3aXNlIHN0YXRlZCwgYWxsIG1vbnRoIHZhbHVlcyBhcmVcbiAqIDEgaW5kZXhlZCBpbnN0ZWFkIG9mIHRoZSB0eXBpY2FsIDAgaW5kZXggaW4gSlMgRGF0ZS5cbiAqIEV4YW1wbGU6XG4gKiAgIEphbnVhcnkgPSBNb250aCAwIHdoZW4gdXNpbmcgSlMgRGF0ZVxuICogICBKYW51YXJ5ID0gTW9udGggMSB3aGVuIHVzaW5nIHRoaXMgZGF0ZXRpbWUgdXRpbFxuICovXG4vKipcbiAqIEdpdmVuIHRoZSBjdXJyZW50IGRhdGV0aW1lIHBhcnRzIGFuZCBhIG5ldyBBTS9QTSB2YWx1ZVxuICogY2FsY3VsYXRlIHdoYXQgdGhlIGhvdXIgc2hvdWxkIGJlIGluIDI0LWhvdXIgdGltZSBmb3JtYXQuXG4gKiBVc2VkIHdoZW4gdG9nZ2xpbmcgdGhlIEFNL1BNIHNlZ21lbnQgc2luY2Ugd2Ugc3RvcmUgb3VyIGhvdXJzXG4gKiBpbiAyNC1ob3VyIHRpbWUgZm9ybWF0IGludGVybmFsbHkuXG4gKi9cbmNvbnN0IGNhbGN1bGF0ZUhvdXJGcm9tQU1QTSA9IChjdXJyZW50UGFydHMsIG5ld0FNUE0pID0+IHtcbiAgY29uc3QgeyBhbXBtOiBjdXJyZW50QU1QTSwgaG91ciB9ID0gY3VycmVudFBhcnRzO1xuICBsZXQgbmV3SG91ciA9IGhvdXI7XG4gIC8qKlxuICAgKiBJZiBnb2luZyBmcm9tIEFNIC0tPiBQTSwgbmVlZCB0byB1cGRhdGUgdGhlXG4gICAqXG4gICAqL1xuICBpZiAoY3VycmVudEFNUE0gPT09ICdhbScgJiYgbmV3QU1QTSA9PT0gJ3BtJykge1xuICAgIG5ld0hvdXIgPSBjb252ZXJ0MTJIb3VyVG8yNEhvdXIobmV3SG91ciwgJ3BtJyk7XG4gICAgLyoqXG4gICAgICogSWYgZ29pbmcgZnJvbSBQTSAtLT4gQU1cbiAgICAgKi9cbiAgfVxuICBlbHNlIGlmIChjdXJyZW50QU1QTSA9PT0gJ3BtJyAmJiBuZXdBTVBNID09PSAnYW0nKSB7XG4gICAgbmV3SG91ciA9IE1hdGguYWJzKG5ld0hvdXIgLSAxMik7XG4gIH1cbiAgcmV0dXJuIG5ld0hvdXI7XG59O1xuXG5jb25zdCBnZXRGb3JtYXR0ZWREYXlQZXJpb2QgPSAoZGF5UGVyaW9kKSA9PiB7XG4gIGlmIChkYXlQZXJpb2QgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICByZXR1cm4gZGF5UGVyaW9kLnRvVXBwZXJDYXNlKCk7XG59O1xuY29uc3QgZ2V0TG9jYWxpemVkVGltZSA9IChsb2NhbGUsIHJlZlBhcnRzLCB1c2UyNEhvdXIpID0+IHtcbiAgaWYgKHJlZlBhcnRzLmhvdXIgPT09IHVuZGVmaW5lZCB8fCByZWZQYXJ0cy5taW51dGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAnSW52YWxpZCBUaW1lJztcbiAgfVxuICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7XG4gICAgaG91cjogJ251bWVyaWMnLFxuICAgIG1pbnV0ZTogJ251bWVyaWMnLFxuICAgIHRpbWVab25lOiAnVVRDJyxcbiAgICBob3VyMTI6ICF1c2UyNEhvdXIsXG4gIH0pLmZvcm1hdChuZXcgRGF0ZShjb252ZXJ0RGF0YVRvSVNPKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVmUGFydHMpLCB7IFxuICAgIC8vIFRPRE86IEZXLTE4MzEgd2lsbCByZW1vdmUgdGhlIG5lZWQgdG8gbWFudWFsbHkgc2V0IHRoZSB0ek9mZnNldCB0byB1bmRlZmluZWRcbiAgICB0ek9mZnNldDogdW5kZWZpbmVkIH0pKSkpO1xufTtcbi8qKlxuICogQWRkcyBwYWRkaW5nIHRvIGEgdGltZSB2YWx1ZSBzb1xuICogdGhhdCBpdCBpcyBhbHdheXMgMiBkaWdpdHMuXG4gKi9cbmNvbnN0IGFkZFRpbWVQYWRkaW5nID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IHZhbHVlVG9TdHJpbmcgPSB2YWx1ZS50b1N0cmluZygpO1xuICBpZiAodmFsdWVUb1N0cmluZy5sZW5ndGggPiAxKSB7XG4gICAgcmV0dXJuIHZhbHVlVG9TdHJpbmc7XG4gIH1cbiAgcmV0dXJuIGAwJHt2YWx1ZVRvU3RyaW5nfWA7XG59O1xuLyoqXG4gKiBGb3JtYXRzIHRoZSBob3VyIHZhbHVlIHNvIHRoYXQgaXRcbiAqIGlzIGFsd2F5cyAyIGRpZ2l0cy4gT25seSBhcHBsaWVzXG4gKiBpZiB1c2luZyAxMiBob3VyIGZvcm1hdC5cbiAqL1xuY29uc3QgZ2V0Rm9ybWF0dGVkSG91ciA9IChob3VyLCB1c2UyNEhvdXIpID0+IHtcbiAgaWYgKCF1c2UyNEhvdXIpIHtcbiAgICByZXR1cm4gaG91ci50b1N0cmluZygpO1xuICB9XG4gIHJldHVybiBhZGRUaW1lUGFkZGluZyhob3VyKTtcbn07XG4vKipcbiAqIEdlbmVyYXRlcyBhbiBhcmlhLWxhYmVsIHRvIGJlIHJlYWQgYnkgc2NyZWVuIHJlYWRlcnNcbiAqIGdpdmVuIGEgbG9jYWwsIGEgZGF0ZSwgYW5kIHdoZXRoZXIgb3Igbm90IHRoYXQgZGF0ZSBpc1xuICogdG9kYXkncyBkYXRlLlxuICovXG5jb25zdCBnZW5lcmF0ZURheUFyaWFMYWJlbCA9IChsb2NhbGUsIHRvZGF5LCByZWZQYXJ0cykgPT4ge1xuICBpZiAocmVmUGFydHMuZGF5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIE1NL0REL1lZWVkgd2lsbCByZXR1cm4gbWlkbmlnaHQgaW4gdGhlIHVzZXIncyB0aW1lem9uZS5cbiAgICovXG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShgJHtyZWZQYXJ0cy5tb250aH0vJHtyZWZQYXJ0cy5kYXl9LyR7cmVmUGFydHMueWVhcn0gR01UKzAwMDBgKTtcbiAgY29uc3QgbGFiZWxTdHJpbmcgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIHtcbiAgICB3ZWVrZGF5OiAnbG9uZycsXG4gICAgbW9udGg6ICdsb25nJyxcbiAgICBkYXk6ICdudW1lcmljJyxcbiAgICB0aW1lWm9uZTogJ1VUQycsXG4gIH0pLmZvcm1hdChkYXRlKTtcbiAgLyoqXG4gICAqIElmIGRhdGUgaXMgdG9kYXksIHByZXBlbmQgXCJUb2RheVwiIHNvIHNjcmVlbiByZWFkZXJzIGluZGljYXRlXG4gICAqIHRoYXQgdGhlIGRhdGUgaXMgdG9kYXkuXG4gICAqL1xuICByZXR1cm4gdG9kYXkgPyBgVG9kYXksICR7bGFiZWxTdHJpbmd9YCA6IGxhYmVsU3RyaW5nO1xufTtcbi8qKlxuICogR2V0cyB0aGUgZGF5IG9mIHRoZSB3ZWVrLCBtb250aCwgYW5kIGRheVxuICogVXNlZCBmb3IgdGhlIGhlYWRlciBpbiBNRCBtb2RlLlxuICovXG5jb25zdCBnZXRNb250aEFuZERheSA9IChsb2NhbGUsIHJlZlBhcnRzKSA9PiB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShgJHtyZWZQYXJ0cy5tb250aH0vJHtyZWZQYXJ0cy5kYXl9LyR7cmVmUGFydHMueWVhcn0gR01UKzAwMDBgKTtcbiAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgeyB3ZWVrZGF5OiAnc2hvcnQnLCBtb250aDogJ3Nob3J0JywgZGF5OiAnbnVtZXJpYycsIHRpbWVab25lOiAnVVRDJyB9KS5mb3JtYXQoZGF0ZSk7XG59O1xuLyoqXG4gKiBHaXZlbiBhIGxvY2FsZSBhbmQgYSBkYXRlIG9iamVjdCxcbiAqIHJldHVybiBhIGZvcm1hdHRlZCBzdHJpbmcgdGhhdCBpbmNsdWRlc1xuICogdGhlIG1vbnRoIG5hbWUgYW5kIGZ1bGwgeWVhci5cbiAqIEV4YW1wbGU6IE1heSAyMDIxXG4gKi9cbmNvbnN0IGdldE1vbnRoQW5kWWVhciA9IChsb2NhbGUsIHJlZlBhcnRzKSA9PiB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShgJHtyZWZQYXJ0cy5tb250aH0vJHtyZWZQYXJ0cy5kYXl9LyR7cmVmUGFydHMueWVhcn0gR01UKzAwMDBgKTtcbiAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgeyBtb250aDogJ2xvbmcnLCB5ZWFyOiAnbnVtZXJpYycsIHRpbWVab25lOiAnVVRDJyB9KS5mb3JtYXQoZGF0ZSk7XG59O1xuLyoqXG4gKiBHaXZlbiBhIGxvY2FsZSBhbmQgYSBkYXRlIG9iamVjdCxcbiAqIHJldHVybiBhIGZvcm1hdHRlZCBzdHJpbmcgdGhhdCBpbmNsdWRlc1xuICogdGhlIHNob3J0IG1vbnRoLCBudW1lcmljIGRheSwgYW5kIGZ1bGwgeWVhci5cbiAqIEV4YW1wbGU6IEFwciAyMiwgMjAyMVxuICovXG5jb25zdCBnZXRNb250aERheUFuZFllYXIgPSAobG9jYWxlLCByZWZQYXJ0cykgPT4ge1xuICByZXR1cm4gZ2V0TG9jYWxpemVkRGF0ZVRpbWUobG9jYWxlLCByZWZQYXJ0cywgeyBtb250aDogJ3Nob3J0JywgZGF5OiAnbnVtZXJpYycsIHllYXI6ICdudW1lcmljJyB9KTtcbn07XG4vKipcbiAqIFdyYXBwZXIgZnVuY3Rpb24gZm9yIEludGwuRGF0ZVRpbWVGb3JtYXQuXG4gKiBBbGxvd3MgZGV2ZWxvcGVycyB0byBhcHBseSBhbiBhbGxvd2VkIGZvcm1hdCB0byBEYXRldGltZVBhcnRzLlxuICogVGhpcyBmdW5jdGlvbiBhbHNvIGhhcyBidWlsdCBpbiBzYWZlZ3VhcmRzIGZvciBvbGRlciBicm93c2VyIGJ1Z3NcbiAqIHdpdGggSW50bC5EYXRlVGltZUZvcm1hdC5cbiAqL1xuY29uc3QgZ2V0TG9jYWxpemVkRGF0ZVRpbWUgPSAobG9jYWxlLCByZWZQYXJ0cywgb3B0aW9ucykgPT4ge1xuICBjb25zdCB0aW1lU3RyaW5nID0gISFyZWZQYXJ0cy5ob3VyICYmICEhcmVmUGFydHMubWludXRlID8gYCAke3JlZlBhcnRzLmhvdXJ9OiR7cmVmUGFydHMubWludXRlfWAgOiAnJztcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGAke3JlZlBhcnRzLm1vbnRofS8ke3JlZlBhcnRzLmRheX0vJHtyZWZQYXJ0cy55ZWFyfSR7dGltZVN0cmluZ30gR01UKzAwMDBgKTtcbiAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyB0aW1lWm9uZTogJ1VUQycgfSkpLmZvcm1hdChkYXRlKTtcbn07XG4vKipcbiAqIEdldHMgYSBsb2NhbGl6ZWQgdmVyc2lvbiBvZiBcIlRvZGF5XCJcbiAqIEZhbGxzIGJhY2sgdG8gXCJUb2RheVwiIGluIEVuZ2xpc2ggZm9yXG4gKiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IFJlbGF0aXZlVGltZUZvcm1hdC5cbiAqL1xuY29uc3QgZ2V0VG9kYXlMYWJlbCA9IChsb2NhbGUpID0+IHtcbiAgaWYgKCdSZWxhdGl2ZVRpbWVGb3JtYXQnIGluIEludGwpIHtcbiAgICBjb25zdCBsYWJlbCA9IG5ldyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdChsb2NhbGUsIHsgbnVtZXJpYzogJ2F1dG8nIH0pLmZvcm1hdCgwLCAnZGF5Jyk7XG4gICAgcmV0dXJuIGxhYmVsLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbGFiZWwuc2xpY2UoMSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuICdUb2RheSc7XG4gIH1cbn07XG4vKipcbiAqIFdoZW4gY2FsbGluZyB0b0lTT1N0cmluZygpLCB0aGUgYnJvd3NlclxuICogd2lsbCBjb252ZXJ0IHRoZSBkYXRlIHRvIFVUQyB0aW1lIGJ5IGVpdGhlciBhZGRpbmdcbiAqIG9yIHN1YnRyYWN0aW5nIHRoZSB0aW1lIHpvbmUgb2Zmc2V0LlxuICogVG8gd29yayBhcm91bmQgdGhpcywgd2UgbmVlZCB0byBlaXRoZXIgYWRkXG4gKiBvciBzdWJ0cmFjdCB0aGUgdGltZSB6b25lIG9mZnNldCB0byB0aGUgRGF0ZVxuICogb2JqZWN0IHByaW9yIHRvIGNhbGxpbmcgdG9JU09TdHJpbmcoKS5cbiAqIFRoaXMgYWxsb3dzIHVzIHRvIGdldCBhbiBJU08gc3RyaW5nXG4gKiB0aGF0IGlzIGluIHRoZSB1c2VyJ3MgdGltZSB6b25lLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBUaW1lIHpvbmUgb2Zmc2V0IGlzIDI0MFxuICogTWVhbmluZzogVGhlIGJyb3dzZXIgbmVlZHMgdG8gYWRkIDI0MCBtaW51dGVzXG4gKiB0byB0aGUgRGF0ZSBvYmplY3QgdG8gZ2V0IFVUQyB0aW1lLlxuICogV2hhdCBJb25pYyBkb2VzOiBXZSBzdWJ0cmFjdCAyNDAgbWludXRlc1xuICogZnJvbSB0aGUgRGF0ZSBvYmplY3QuIFRoZSBicm93c2VyIHRoZW4gYWRkc1xuICogMjQwIG1pbnV0ZXMgaW4gdG9JU09TdHJpbmcoKS4gVGhlIHJlc3VsdFxuICogaXMgYSB0aW1lIHRoYXQgaXMgaW4gdGhlIHVzZXIncyB0aW1lIHpvbmVcbiAqIGFuZCBub3QgVVRDLlxuICpcbiAqIE5vdGU6IFNvbWUgdGltZXpvbmVzIGluY2x1ZGUgbWludXRlIGFkanVzdG1lbnRzXG4gKiBzdWNoIGFzIDMwIG9yIDQ1IG1pbnV0ZXMuIFRoaXMgaXMgd2h5IHdlIHVzZSBzZXRNaW51dGVzXG4gKiBpbnN0ZWFkIG9mIHNldEhvdXJzLlxuICogRXhhbXBsZTogSW5kaWEgU3RhbmRhcmQgVGltZVxuICogVGltZXpvbmUgb2Zmc2V0OiAtMzMwID0gLTUuNSBob3Vycy5cbiAqXG4gKiBMaXN0IG9mIHRpbWV6b25lcyB3aXRoIDMwIGFuZCA0NSBtaW51dGUgdGltZXpvbmVzOlxuICogaHR0cHM6Ly93d3cudGltZWFuZGRhdGUuY29tL3RpbWUvdGltZS16b25lcy1pbnRlcmVzdGluZy5odG1sXG4gKi9cbmNvbnN0IHJlbW92ZURhdGVUek9mZnNldCA9IChkYXRlKSA9PiB7XG4gIGNvbnN0IHR6T2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICBkYXRlLnNldE1pbnV0ZXMoZGF0ZS5nZXRNaW51dGVzKCkgLSB0ek9mZnNldCk7XG4gIHJldHVybiBkYXRlO1xufTtcbmNvbnN0IERBVEVfQU0gPSByZW1vdmVEYXRlVHpPZmZzZXQobmV3IERhdGUoJzIwMjJUMDE6MDAnKSk7XG5jb25zdCBEQVRFX1BNID0gcmVtb3ZlRGF0ZVR6T2Zmc2V0KG5ldyBEYXRlKCcyMDIyVDEzOjAwJykpO1xuLyoqXG4gKiBGb3JtYXRzIHRoZSBsb2NhbGUncyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGRheSBwZXJpb2QgKGFtL3BtKSBmb3IgYSBnaXZlblxuICogcmVmIHBhcnRzIGRheSBwZXJpb2QuXG4gKlxuICogQHBhcmFtIGxvY2FsZSBUaGUgbG9jYWxlIHRvIGZvcm1hdCB0aGUgZGF5IHBlcmlvZCBpbi5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgZGF0ZSBzdHJpbmcsIGluIElTTyBmb3JtYXQuXG4gKiBAcmV0dXJucyBUaGUgbG9jYWxpemVkIGRheSBwZXJpb2QgKGFtL3BtKSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gdmFsdWUuXG4gKi9cbmNvbnN0IGdldExvY2FsaXplZERheVBlcmlvZCA9IChsb2NhbGUsIGRheVBlcmlvZCkgPT4ge1xuICBjb25zdCBkYXRlID0gZGF5UGVyaW9kID09PSAnYW0nID8gREFURV9BTSA6IERBVEVfUE07XG4gIGNvbnN0IGxvY2FsaXplZERheVBlcmlvZCA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwge1xuICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICB0aW1lWm9uZTogJ1VUQycsXG4gIH0pXG4gICAgLmZvcm1hdFRvUGFydHMoZGF0ZSlcbiAgICAuZmluZCgocGFydCkgPT4gcGFydC50eXBlID09PSAnZGF5UGVyaW9kJyk7XG4gIGlmIChsb2NhbGl6ZWREYXlQZXJpb2QpIHtcbiAgICByZXR1cm4gbG9jYWxpemVkRGF5UGVyaW9kLnZhbHVlO1xuICB9XG4gIHJldHVybiBnZXRGb3JtYXR0ZWREYXlQZXJpb2QoZGF5UGVyaW9kKTtcbn07XG4vKipcbiAqIEZvcm1hdHMgdGhlIGRhdGV0aW1lJ3MgdmFsdWUgdG8gYSBzdHJpbmcsIGZvciB1c2UgaW4gdGhlIG5hdGl2ZSBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGZvcm1hdCwgZWl0aGVyIGFuIElTTyBzdHJpbmcgb3IgYW4gYXJyYXkgdGhlcmVvZi5cbiAqL1xuY29uc3QgZm9ybWF0VmFsdWUgPSAodmFsdWUpID0+IHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCcpIDogdmFsdWU7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgZGF0ZSBhc1xuICogYW4gSVNPIHN0cmluZyBpbiB0aGUgdXNlcidzXG4gKiB0aW1lIHpvbmUuXG4gKi9cbmNvbnN0IGdldFRvZGF5ID0gKCkgPT4ge1xuICAvKipcbiAgICogaW9uLWRhdGV0aW1lIGludGVudGlvbmFsbHkgZG9lcyBub3RcbiAgICogcGFyc2UgdGltZSB6b25lcy9kbyBhdXRvbWF0aWMgdGltZSB6b25lXG4gICAqIGNvbnZlcnNpb24gd2hlbiBhY2NlcHRpbmcgdXNlciBpbnB1dC5cbiAgICogSG93ZXZlciB3aGVuIHdlIGdldCB0b2RheSdzIGRhdGUgc3RyaW5nLFxuICAgKiB3ZSB3YW50IGl0IGZvcm1hdHRlZCByZWxhdGl2ZSB0byB0aGUgdXNlcidzXG4gICAqIHRpbWUgem9uZS5cbiAgICpcbiAgICogV2hlbiBjYWxsaW5nIHRvSVNPU3RyaW5nKCksIHRoZSBicm93c2VyXG4gICAqIHdpbGwgY29udmVydCB0aGUgZGF0ZSB0byBVVEMgdGltZSBieSBlaXRoZXIgYWRkaW5nXG4gICAqIG9yIHN1YnRyYWN0aW5nIHRoZSB0aW1lIHpvbmUgb2Zmc2V0LlxuICAgKiBUbyB3b3JrIGFyb3VuZCB0aGlzLCB3ZSBuZWVkIHRvIGVpdGhlciBhZGRcbiAgICogb3Igc3VidHJhY3QgdGhlIHRpbWUgem9uZSBvZmZzZXQgdG8gdGhlIERhdGVcbiAgICogb2JqZWN0IHByaW9yIHRvIGNhbGxpbmcgdG9JU09TdHJpbmcoKS5cbiAgICogVGhpcyBhbGxvd3MgdXMgdG8gZ2V0IGFuIElTTyBzdHJpbmdcbiAgICogdGhhdCBpcyBpbiB0aGUgdXNlcidzIHRpbWUgem9uZS5cbiAgICovXG4gIHJldHVybiByZW1vdmVEYXRlVHpPZmZzZXQobmV3IERhdGUoKSkudG9JU09TdHJpbmcoKTtcbn07XG5jb25zdCBtaW51dGVzID0gW1xuICAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LCAxNiwgMTcsIDE4LCAxOSwgMjAsIDIxLCAyMiwgMjMsIDI0LCAyNSwgMjYsIDI3LCAyOCwgMjksIDMwLCAzMSxcbiAgMzIsIDMzLCAzNCwgMzUsIDM2LCAzNywgMzgsIDM5LCA0MCwgNDEsIDQyLCA0MywgNDQsIDQ1LCA0NiwgNDcsIDQ4LCA0OSwgNTAsIDUxLCA1MiwgNTMsIDU0LCA1NSwgNTYsIDU3LCA1OCwgNTksXG5dO1xuY29uc3QgaG91cjEyID0gWzEyLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTFdO1xuY29uc3QgaG91cjIzID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyM107XG4vKipcbiAqIEdpdmVuIGEgbG9jYWxlIGFuZCBhIG1vZGUsXG4gKiByZXR1cm4gYW4gYXJyYXkgd2l0aCBmb3JtYXR0ZWQgZGF5c1xuICogb2YgdGhlIHdlZWsuIGlPUyBzaG91bGQgZGlzcGxheSBkYXlzXG4gKiBzdWNoIGFzIFwiTW9uXCIgb3IgXCJUdWVcIi5cbiAqIE1EIHNob3VsZCBkaXNwbGF5IGRheXMgc3VjaCBhcyBcIk1cIlxuICogb3IgXCJUXCIuXG4gKi9cbmNvbnN0IGdldERheXNPZldlZWsgPSAobG9jYWxlLCBtb2RlLCBmaXJzdERheU9mV2VlayA9IDApID0+IHtcbiAgLyoqXG4gICAqIE5vdiAxc3QsIDIwMjAgc3RhcnRzIG9uIGEgU3VuZGF5LlxuICAgKiBpb24tZGF0ZXRpbWUgYXNzdW1lcyB3ZWVrcyBzdGFydCBvbiBTdW5kYXksXG4gICAqIGJ1dCBpcyBjb25maWd1cmFibGUgdmlhIGBmaXJzdERheU9mV2Vla2AuXG4gICAqL1xuICBjb25zdCB3ZWVrZGF5Rm9ybWF0ID0gbW9kZSA9PT0gJ2lvcycgPyAnc2hvcnQnIDogJ25hcnJvdyc7XG4gIGNvbnN0IGludGwgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIHsgd2Vla2RheTogd2Vla2RheUZvcm1hdCB9KTtcbiAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoJzExLzAxLzIwMjAnKTtcbiAgY29uc3QgZGF5c09mV2VlayA9IFtdO1xuICAvKipcbiAgICogRm9yIGVhY2ggZGF5IG9mIHRoZSB3ZWVrLFxuICAgKiBnZXQgdGhlIGRheSBuYW1lLlxuICAgKi9cbiAgZm9yIChsZXQgaSA9IGZpcnN0RGF5T2ZXZWVrOyBpIDwgZmlyc3REYXlPZldlZWsgKyA3OyBpKyspIHtcbiAgICBjb25zdCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKHN0YXJ0RGF0ZSk7XG4gICAgY3VycmVudERhdGUuc2V0RGF0ZShjdXJyZW50RGF0ZS5nZXREYXRlKCkgKyBpKTtcbiAgICBkYXlzT2ZXZWVrLnB1c2goaW50bC5mb3JtYXQoY3VycmVudERhdGUpKTtcbiAgfVxuICByZXR1cm4gZGF5c09mV2Vlaztcbn07XG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyBhbGwgb2YgdGhlXG4gKiBkYXlzIGluIGEgbW9udGggZm9yIGEgZ2l2ZW4geWVhci4gVmFsdWVzIGFyZVxuICogYWxpZ25lZCB3aXRoIGEgd2VlayBjYWxlbmRhciBzdGFydGluZyBvblxuICogdGhlIGZpcnN0RGF5T2ZXZWVrIHZhbHVlIChTdW5kYXkgYnkgZGVmYXVsdClcbiAqIHVzaW5nIG51bGwgdmFsdWVzLlxuICovXG5jb25zdCBnZXREYXlzT2ZNb250aCA9IChtb250aCwgeWVhciwgZmlyc3REYXlPZldlZWspID0+IHtcbiAgY29uc3QgbnVtRGF5cyA9IGdldE51bURheXNJbk1vbnRoKG1vbnRoLCB5ZWFyKTtcbiAgY29uc3QgZmlyc3RPZk1vbnRoID0gbmV3IERhdGUoYCR7bW9udGh9LzEvJHt5ZWFyfWApLmdldERheSgpO1xuICAvKipcbiAgICogVG8gZ2V0IHRoZSBmaXJzdCBkYXkgb2YgdGhlIG1vbnRoIGFsaWduZWQgb24gdGhlIGNvcnJlY3RcbiAgICogZGF5IG9mIHRoZSB3ZWVrLCB3ZSBuZWVkIHRvIGRldGVybWluZSBob3cgbWFueSBcImZpbGxlclwiIGRheXNcbiAgICogdG8gZ2VuZXJhdGUuIFRoZXNlIGZpbGxlciBkYXlzIGFzIGVtcHR5L2Rpc2FibGVkIGJ1dHRvbnNcbiAgICogdGhhdCBmaWxsIHRoZSBzcGFjZSBvZiB0aGUgZGF5cyBvZiB0aGUgd2VlayBiZWZvcmUgdGhlIGZpcnN0XG4gICAqIG9mIHRoZSBtb250aC5cbiAgICpcbiAgICogVGhlcmUgYXJlIHR3byBjYXNlcyBoZXJlOlxuICAgKlxuICAgKiAxLiBJZiBmaXJzdE9mTW9udGggPSA0LCBmaXJzdERheU9mV2VlayA9IDAgdGhlbiB0aGUgb2Zmc2V0XG4gICAqIGlzICg0IC0gKDAgKyAxKSkgPSAzLiBTaW5jZSB0aGUgb2Zmc2V0IGxvb3AgZ29lcyBmcm9tIDAgdG8gMyBpbmNsdXNpdmUsXG4gICAqIHRoaXMgd2lsbCBnZW5lcmF0ZSA0IGZpbGxlciBkYXlzICgwLCAxLCAyLCAzKSwgYW5kIHRoZW4gZGF5IG9mIHdlZWsgNCB3aWxsIGhhdmVcbiAgICogdGhlIGZpcnN0IGRheSBvZiB0aGUgbW9udGguXG4gICAqXG4gICAqIDIuIElmIGZpcnN0T2ZNb250aCA9IDIsIGZpcnN0RGF5T2ZXZWVrID0gNCB0aGVuIHRoZSBvZmZzZXRcbiAgICogaXMgKDYgLSAoNCAtIDIpKSA9IDQuIFNpbmNlIHRoZSBvZmZzZXQgbG9vcCBnb2VzIGZyb20gMCB0byA0IGluY2x1c2l2ZSxcbiAgICogdGhpcyB3aWxsIGdlbmVyYXRlIDUgZmlsbGVyIGRheXMgKDAsIDEsIDIsIDMsIDQpLCBhbmQgdGhlbiBkYXkgb2Ygd2VlayA1IHdpbGwgaGF2ZVxuICAgKiB0aGUgZmlyc3QgZGF5IG9mIHRoZSBtb250aC5cbiAgICovXG4gIGNvbnN0IG9mZnNldCA9IGZpcnN0T2ZNb250aCA+PSBmaXJzdERheU9mV2VlayA/IGZpcnN0T2ZNb250aCAtIChmaXJzdERheU9mV2VlayArIDEpIDogNiAtIChmaXJzdERheU9mV2VlayAtIGZpcnN0T2ZNb250aCk7XG4gIGxldCBkYXlzID0gW107XG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IG51bURheXM7IGkrKykge1xuICAgIGRheXMucHVzaCh7IGRheTogaSwgZGF5T2ZXZWVrOiAob2Zmc2V0ICsgaSkgJSA3IH0pO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDw9IG9mZnNldDsgaSsrKSB7XG4gICAgZGF5cyA9IFt7IGRheTogbnVsbCwgZGF5T2ZXZWVrOiBudWxsIH0sIC4uLmRheXNdO1xuICB9XG4gIHJldHVybiBkYXlzO1xufTtcbi8qKlxuICogR2l2ZW4gYSBsb2NhbCwgcmVmZXJlbmNlIGRhdGV0aW1lIHBhcnRzIGFuZCBvcHRpb25cbiAqIG1heC9taW4gYm91bmQgZGF0ZXRpbWUgcGFydHMsIGNhbGN1bGF0ZSB0aGUgYWNjZXB0YWJsZVxuICogaG91ciBhbmQgbWludXRlIHZhbHVlcyBhY2NvcmRpbmcgdG8gdGhlIGJvdW5kcyBhbmQgbG9jYWxlLlxuICovXG5jb25zdCBnZW5lcmF0ZVRpbWUgPSAocmVmUGFydHMsIGhvdXJDeWNsZSA9ICdoMTInLCBtaW5QYXJ0cywgbWF4UGFydHMsIGhvdXJWYWx1ZXMsIG1pbnV0ZVZhbHVlcykgPT4ge1xuICBjb25zdCB1c2UyNEhvdXIgPSBob3VyQ3ljbGUgPT09ICdoMjMnO1xuICBsZXQgcHJvY2Vzc2VkSG91cnMgPSB1c2UyNEhvdXIgPyBob3VyMjMgOiBob3VyMTI7XG4gIGxldCBwcm9jZXNzZWRNaW51dGVzID0gbWludXRlcztcbiAgbGV0IGlzQU1BbGxvd2VkID0gdHJ1ZTtcbiAgbGV0IGlzUE1BbGxvd2VkID0gdHJ1ZTtcbiAgaWYgKGhvdXJWYWx1ZXMpIHtcbiAgICBwcm9jZXNzZWRIb3VycyA9IHByb2Nlc3NlZEhvdXJzLmZpbHRlcigoaG91cikgPT4gaG91clZhbHVlcy5pbmNsdWRlcyhob3VyKSk7XG4gIH1cbiAgaWYgKG1pbnV0ZVZhbHVlcykge1xuICAgIHByb2Nlc3NlZE1pbnV0ZXMgPSBwcm9jZXNzZWRNaW51dGVzLmZpbHRlcigobWludXRlKSA9PiBtaW51dGVWYWx1ZXMuaW5jbHVkZXMobWludXRlKSk7XG4gIH1cbiAgaWYgKG1pblBhcnRzKSB7XG4gICAgLyoqXG4gICAgICogSWYgcmVmIGRheSBpcyB0aGUgc2FtZSBhcyB0aGVcbiAgICAgKiBtaW5pbXVtIGFsbG93ZWQgZGF5LCBmaWx0ZXIgaG91ci9taW51dGVcbiAgICAgKiB2YWx1ZXMgYWNjb3JkaW5nIHRvIG1pbiBob3VyIGFuZCBtaW51dGUuXG4gICAgICovXG4gICAgaWYgKGlzU2FtZURheShyZWZQYXJ0cywgbWluUGFydHMpKSB7XG4gICAgICAvKipcbiAgICAgICAqIFVzZXJzIG1heSBub3QgYWx3YXlzIHNldCB0aGUgaG91ci9taW51dGUgZm9yXG4gICAgICAgKiBtaW4gdmFsdWUgKGkuZS4gMjAyMS0wNi0wMikgc28gd2Ugc2hvdWxkIGFsbG93XG4gICAgICAgKiBhbGwgaG91cnMvbWludXRlcyBpbiB0aGF0IGNhc2UuXG4gICAgICAgKi9cbiAgICAgIGlmIChtaW5QYXJ0cy5ob3VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvY2Vzc2VkSG91cnMgPSBwcm9jZXNzZWRIb3Vycy5maWx0ZXIoKGhvdXIpID0+IHtcbiAgICAgICAgICBjb25zdCBjb252ZXJ0ZWRIb3VyID0gcmVmUGFydHMuYW1wbSA9PT0gJ3BtJyA/IChob3VyICsgMTIpICUgMjQgOiBob3VyO1xuICAgICAgICAgIHJldHVybiAodXNlMjRIb3VyID8gaG91ciA6IGNvbnZlcnRlZEhvdXIpID49IG1pblBhcnRzLmhvdXI7XG4gICAgICAgIH0pO1xuICAgICAgICBpc0FNQWxsb3dlZCA9IG1pblBhcnRzLmhvdXIgPCAxMztcbiAgICAgIH1cbiAgICAgIGlmIChtaW5QYXJ0cy5taW51dGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1pbmltdW0gbWludXRlIHJhbmdlIHNob3VsZCBub3QgYmUgZW5mb3JjZWQgd2hlblxuICAgICAgICAgKiB0aGUgaG91ciBpcyBncmVhdGVyIHRoYW4gdGhlIG1pbiBob3VyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBGb3IgZXhhbXBsZSB3aXRoIGEgbWluaW11bSByYW5nZSBvZiAwOTozMCwgdXNlcnNcbiAgICAgICAgICogc2hvdWxkIGJlIGFibGUgdG8gc2VsZWN0IDEwOjAwLTEwOjI5IGFuZCBiZXlvbmQuXG4gICAgICAgICAqL1xuICAgICAgICBsZXQgaXNQYXN0TWluSG91ciA9IGZhbHNlO1xuICAgICAgICBpZiAobWluUGFydHMuaG91ciAhPT0gdW5kZWZpbmVkICYmIHJlZlBhcnRzLmhvdXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChyZWZQYXJ0cy5ob3VyID4gbWluUGFydHMuaG91cikge1xuICAgICAgICAgICAgaXNQYXN0TWluSG91ciA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3NlZE1pbnV0ZXMgPSBwcm9jZXNzZWRNaW51dGVzLmZpbHRlcigobWludXRlKSA9PiB7XG4gICAgICAgICAgaWYgKGlzUGFzdE1pbkhvdXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbWludXRlID49IG1pblBhcnRzLm1pbnV0ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIElmIHJlZiBkYXkgaXMgYmVmb3JlIG1pbmltdW1cbiAgICAgICAqIGRheSBkbyBub3QgcmVuZGVyIGFueSBob3Vycy9taW51dGUgdmFsdWVzXG4gICAgICAgKi9cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNCZWZvcmUocmVmUGFydHMsIG1pblBhcnRzKSkge1xuICAgICAgcHJvY2Vzc2VkSG91cnMgPSBbXTtcbiAgICAgIHByb2Nlc3NlZE1pbnV0ZXMgPSBbXTtcbiAgICAgIGlzQU1BbGxvd2VkID0gaXNQTUFsbG93ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKG1heFBhcnRzKSB7XG4gICAgLyoqXG4gICAgICogSWYgcmVmIGRheSBpcyB0aGUgc2FtZSBhcyB0aGVcbiAgICAgKiBtYXhpbXVtIGFsbG93ZWQgZGF5LCBmaWx0ZXIgaG91ci9taW51dGVcbiAgICAgKiB2YWx1ZXMgYWNjb3JkaW5nIHRvIG1heCBob3VyIGFuZCBtaW51dGUuXG4gICAgICovXG4gICAgaWYgKGlzU2FtZURheShyZWZQYXJ0cywgbWF4UGFydHMpKSB7XG4gICAgICAvKipcbiAgICAgICAqIFVzZXJzIG1heSBub3QgYWx3YXlzIHNldCB0aGUgaG91ci9taW51dGUgZm9yXG4gICAgICAgKiBtYXggdmFsdWUgKGkuZS4gMjAyMS0wNi0wMikgc28gd2Ugc2hvdWxkIGFsbG93XG4gICAgICAgKiBhbGwgaG91cnMvbWludXRlcyBpbiB0aGF0IGNhc2UuXG4gICAgICAgKi9cbiAgICAgIGlmIChtYXhQYXJ0cy5ob3VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvY2Vzc2VkSG91cnMgPSBwcm9jZXNzZWRIb3Vycy5maWx0ZXIoKGhvdXIpID0+IHtcbiAgICAgICAgICBjb25zdCBjb252ZXJ0ZWRIb3VyID0gcmVmUGFydHMuYW1wbSA9PT0gJ3BtJyA/IChob3VyICsgMTIpICUgMjQgOiBob3VyO1xuICAgICAgICAgIHJldHVybiAodXNlMjRIb3VyID8gaG91ciA6IGNvbnZlcnRlZEhvdXIpIDw9IG1heFBhcnRzLmhvdXI7XG4gICAgICAgIH0pO1xuICAgICAgICBpc1BNQWxsb3dlZCA9IG1heFBhcnRzLmhvdXIgPj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAobWF4UGFydHMubWludXRlICE9PSB1bmRlZmluZWQgJiYgcmVmUGFydHMuaG91ciA9PT0gbWF4UGFydHMuaG91cikge1xuICAgICAgICAvLyBUaGUgYXZhaWxhYmxlIG1pbnV0ZXMgc2hvdWxkIG9ubHkgYmUgZmlsdGVyZWQgd2hlbiB0aGUgaG91ciBpcyB0aGUgc2FtZSBhcyB0aGUgbWF4IGhvdXIuXG4gICAgICAgIC8vIEZvciBleGFtcGxlIGlmIHRoZSBtYXggaG91ciBpcyAxMDozMCBhbmQgdGhlIGN1cnJlbnQgaG91ciBpcyAxMDowMCxcbiAgICAgICAgLy8gdXNlcnMgc2hvdWxkIGJlIGFibGUgdG8gc2VsZWN0IDAwLTMwIG1pbnV0ZXMuXG4gICAgICAgIC8vIElmIHRoZSBjdXJyZW50IGhvdXIgaXMgMDk6MDAsIHVzZXJzIHNob3VsZCBiZSBhYmxlIHRvIHNlbGVjdCAwMC02MCBtaW51dGVzLlxuICAgICAgICBwcm9jZXNzZWRNaW51dGVzID0gcHJvY2Vzc2VkTWludXRlcy5maWx0ZXIoKG1pbnV0ZSkgPT4gbWludXRlIDw9IG1heFBhcnRzLm1pbnV0ZSk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIElmIHJlZiBkYXkgaXMgYWZ0ZXIgbWluaW11bVxuICAgICAgICogZGF5IGRvIG5vdCByZW5kZXIgYW55IGhvdXJzL21pbnV0ZSB2YWx1ZXNcbiAgICAgICAqL1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0FmdGVyKHJlZlBhcnRzLCBtYXhQYXJ0cykpIHtcbiAgICAgIHByb2Nlc3NlZEhvdXJzID0gW107XG4gICAgICBwcm9jZXNzZWRNaW51dGVzID0gW107XG4gICAgICBpc0FNQWxsb3dlZCA9IGlzUE1BbGxvd2VkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgaG91cnM6IHByb2Nlc3NlZEhvdXJzLFxuICAgIG1pbnV0ZXM6IHByb2Nlc3NlZE1pbnV0ZXMsXG4gICAgYW06IGlzQU1BbGxvd2VkLFxuICAgIHBtOiBpc1BNQWxsb3dlZCxcbiAgfTtcbn07XG4vKipcbiAqIEdpdmVuIERhdGV0aW1lUGFydHMsIGdlbmVyYXRlIHRoZSBwcmV2aW91cyxcbiAqIGN1cnJlbnQsIGFuZCBhbmQgbmV4dCBtb250aHMuXG4gKi9cbmNvbnN0IGdlbmVyYXRlTW9udGhzID0gKHJlZlBhcnRzKSA9PiB7XG4gIHJldHVybiBbXG4gICAgZ2V0UHJldmlvdXNNb250aChyZWZQYXJ0cyksXG4gICAgeyBtb250aDogcmVmUGFydHMubW9udGgsIHllYXI6IHJlZlBhcnRzLnllYXIsIGRheTogcmVmUGFydHMuZGF5IH0sXG4gICAgZ2V0TmV4dE1vbnRoKHJlZlBhcnRzKSxcbiAgXTtcbn07XG5jb25zdCBnZXRNb250aENvbHVtbkRhdGEgPSAobG9jYWxlLCByZWZQYXJ0cywgbWluUGFydHMsIG1heFBhcnRzLCBtb250aFZhbHVlcywgZm9ybWF0T3B0aW9ucyA9IHtcbiAgbW9udGg6ICdsb25nJyxcbn0pID0+IHtcbiAgY29uc3QgeyB5ZWFyIH0gPSByZWZQYXJ0cztcbiAgY29uc3QgbW9udGhzID0gW107XG4gIGlmIChtb250aFZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IHByb2Nlc3NlZE1vbnRocyA9IG1vbnRoVmFsdWVzO1xuICAgIGlmICgobWF4UGFydHMgPT09IG51bGwgfHwgbWF4UGFydHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1heFBhcnRzLm1vbnRoKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm9jZXNzZWRNb250aHMgPSBwcm9jZXNzZWRNb250aHMuZmlsdGVyKChtb250aCkgPT4gbW9udGggPD0gbWF4UGFydHMubW9udGgpO1xuICAgIH1cbiAgICBpZiAoKG1pblBhcnRzID09PSBudWxsIHx8IG1pblBhcnRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtaW5QYXJ0cy5tb250aCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJvY2Vzc2VkTW9udGhzID0gcHJvY2Vzc2VkTW9udGhzLmZpbHRlcigobW9udGgpID0+IG1vbnRoID49IG1pblBhcnRzLm1vbnRoKTtcbiAgICB9XG4gICAgcHJvY2Vzc2VkTW9udGhzLmZvckVhY2goKHByb2Nlc3NlZE1vbnRoKSA9PiB7XG4gICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoYCR7cHJvY2Vzc2VkTW9udGh9LzEvJHt5ZWFyfSBHTVQrMDAwMGApO1xuICAgICAgY29uc3QgbW9udGhTdHJpbmcgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZm9ybWF0T3B0aW9ucyksIHsgdGltZVpvbmU6ICdVVEMnIH0pKS5mb3JtYXQoZGF0ZSk7XG4gICAgICBtb250aHMucHVzaCh7IHRleHQ6IG1vbnRoU3RyaW5nLCB2YWx1ZTogcHJvY2Vzc2VkTW9udGggfSk7XG4gICAgfSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgY29uc3QgbWF4TW9udGggPSBtYXhQYXJ0cyAmJiBtYXhQYXJ0cy55ZWFyID09PSB5ZWFyID8gbWF4UGFydHMubW9udGggOiAxMjtcbiAgICBjb25zdCBtaW5Nb250aCA9IG1pblBhcnRzICYmIG1pblBhcnRzLnllYXIgPT09IHllYXIgPyBtaW5QYXJ0cy5tb250aCA6IDE7XG4gICAgZm9yIChsZXQgaSA9IG1pbk1vbnRoOyBpIDw9IG1heE1vbnRoOyBpKyspIHtcbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIFRoZXJlIGlzIGEgYnVnIG9uIGlPUyAxNCB3aGVyZVxuICAgICAgICogSW50bC5EYXRlVGltZUZvcm1hdCB0YWtlcyBpbnRvIGFjY291bnRcbiAgICAgICAqIHRoZSBsb2NhbCB0aW1lem9uZSBvZmZzZXQgd2hlbiBmb3JtYXR0aW5nIGRhdGVzLlxuICAgICAgICpcbiAgICAgICAqIEZvcmNpbmcgdGhlIHRpbWV6b25lIHRvICdVVEMnIGZpeGVzIHRoZSBpc3N1ZS4gSG93ZXZlcixcbiAgICAgICAqIHdlIHNob3VsZCBrZWVwIHRoaXMgd29ya2Fyb3VuZCBhcyBpdCBpcyBzYWZlci4gSW4gdGhlIGV2ZW50XG4gICAgICAgKiB0aGlzIGJyZWFrcyBpbiBhbm90aGVyIGJyb3dzZXIsIHdlIHdpbGwgbm90IGJlIGltcGFjdGVkXG4gICAgICAgKiBiZWNhdXNlIGFsbCBkYXRlcyB3aWxsIGJlIGludGVycHJldGVkIGluIFVUQy5cbiAgICAgICAqXG4gICAgICAgKiBFeGFtcGxlOlxuICAgICAgICogbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoJ2VuLVVTJywgeyBtb250aDogJ2xvbmcnIH0pLmZvcm1hdChuZXcgRGF0ZSgnU2F0IEFwciAwMSAyMDA2IDAwOjAwOjAwIEdNVC0wNDAwIChFRFQpJykpIC8vIFwiTWFyY2hcIlxuICAgICAgICogbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoJ2VuLVVTJywgeyBtb250aDogJ2xvbmcnLCB0aW1lWm9uZTogJ1VUQycgfSkuZm9ybWF0KG5ldyBEYXRlKCdTYXQgQXByIDAxIDIwMDYgMDA6MDA6MDAgR01ULTA0MDAgKEVEVCknKSkgLy8gXCJBcHJpbFwiXG4gICAgICAgKlxuICAgICAgICogSW4gY2VydGFpbiB0aW1lem9uZXMsIGlPUyAxNCBzaG93cyB0aGUgd3JvbmdcbiAgICAgICAqIGRhdGUgZm9yIC50b1VUQ1N0cmluZygpLiBUbyBjb21iYXQgdGhpcywgd2VcbiAgICAgICAqIGZvcmNlIGFsbCBvZiB0aGUgdGltZXpvbmVzIHRvIEdNVCswMDAwIChVVEMpLlxuICAgICAgICpcbiAgICAgICAqIEV4YW1wbGU6XG4gICAgICAgKiBUaW1lIFpvbmU6IENlbnRyYWwgRXVyb3BlYW4gU3RhbmRhcmQgVGltZVxuICAgICAgICogbmV3IERhdGUoJzEvMS8xOTkyJykudG9VVENTdHJpbmcoKSAvLyBcIlR1ZSwgMzEgRGVjIDE5OTEgMjM6MDA6MDAgR01UXCJcbiAgICAgICAqIG5ldyBEYXRlKCcxLzEvMTk5MiBHTVQrMDAwMCcpLnRvVVRDU3RyaW5nKCkgLy8gXCJXZWQsIDAxIEphbiAxOTkyIDAwOjAwOjAwIEdNVFwiXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShgJHtpfS8xLyR7eWVhcn0gR01UKzAwMDBgKTtcbiAgICAgIGNvbnN0IG1vbnRoU3RyaW5nID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGZvcm1hdE9wdGlvbnMpLCB7IHRpbWVab25lOiAnVVRDJyB9KSkuZm9ybWF0KGRhdGUpO1xuICAgICAgbW9udGhzLnB1c2goeyB0ZXh0OiBtb250aFN0cmluZywgdmFsdWU6IGkgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtb250aHM7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGluZm9ybWF0aW9uIHJlZ2FyZGluZ1xuICogc2VsZWN0YWJsZSBkYXRlcyAoaS5lIDFzdCwgMm5kLCAzcmQsIGV0YylcbiAqIHdpdGhpbiBhIHJlZmVyZW5jZSBtb250aC5cbiAqIEBwYXJhbSBsb2NhbGUgVGhlIGxvY2FsZSB0byBmb3JtYXQgdGhlIGRhdGUgd2l0aFxuICogQHBhcmFtIHJlZlBhcnRzIFRoZSByZWZlcmVuY2UgbW9udGgveWVhciB0byBnZW5lcmF0ZSBkYXRlcyBmb3JcbiAqIEBwYXJhbSBtaW5QYXJ0cyBUaGUgbWluaW11bSBib3VuZCBvbiB0aGUgZGF0ZSB0aGF0IGNhbiBiZSByZXR1cm5lZFxuICogQHBhcmFtIG1heFBhcnRzIFRoZSBtYXhpbXVtIGJvdW5kIG9uIHRoZSBkYXRlIHRoYXQgY2FuIGJlIHJldHVybmVkXG4gKiBAcGFyYW0gZGF5VmFsdWVzIFRoZSBhbGxvd2VkIGRhdGUgdmFsdWVzXG4gKiBAcmV0dXJucyBEYXRlIGRhdGEgdG8gYmUgdXNlZCBpbiBpb24tcGlja2VyLWNvbHVtbi1pbnRlcm5hbFxuICovXG5jb25zdCBnZXREYXlDb2x1bW5EYXRhID0gKGxvY2FsZSwgcmVmUGFydHMsIG1pblBhcnRzLCBtYXhQYXJ0cywgZGF5VmFsdWVzLCBmb3JtYXRPcHRpb25zID0ge1xuICBkYXk6ICdudW1lcmljJyxcbn0pID0+IHtcbiAgY29uc3QgeyBtb250aCwgeWVhciB9ID0gcmVmUGFydHM7XG4gIGNvbnN0IGRheXMgPSBbXTtcbiAgLyoqXG4gICAqIElmIHdlIGhhdmUgbWF4L21pbiBib3VuZHMgdGhhdCBpbiB0aGUgc2FtZVxuICAgKiBtb250aC95ZWFyIGFzIHRoZSByZWZQYXJ0cywgd2Ugc2hvdWxkXG4gICAqIHVzZSB0aGUgZGVmaW5lIGRheSBhcyB0aGUgbWF4L21pbiBkYXkuXG4gICAqIE90aGVyd2lzZSwgZmFsbGJhY2sgdG8gdGhlIG1heC9taW4gZGF5cyBpbiBhIG1vbnRoLlxuICAgKi9cbiAgY29uc3QgbnVtRGF5c0luTW9udGggPSBnZXROdW1EYXlzSW5Nb250aChtb250aCwgeWVhcik7XG4gIGNvbnN0IG1heERheSA9IChtYXhQYXJ0cyA9PT0gbnVsbCB8fCBtYXhQYXJ0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWF4UGFydHMuZGF5KSAmJiBtYXhQYXJ0cy55ZWFyID09PSB5ZWFyICYmIG1heFBhcnRzLm1vbnRoID09PSBtb250aCA/IG1heFBhcnRzLmRheSA6IG51bURheXNJbk1vbnRoO1xuICBjb25zdCBtaW5EYXkgPSAobWluUGFydHMgPT09IG51bGwgfHwgbWluUGFydHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1pblBhcnRzLmRheSkgJiYgbWluUGFydHMueWVhciA9PT0geWVhciAmJiBtaW5QYXJ0cy5tb250aCA9PT0gbW9udGggPyBtaW5QYXJ0cy5kYXkgOiAxO1xuICBpZiAoZGF5VmFsdWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBsZXQgcHJvY2Vzc2VkRGF5cyA9IGRheVZhbHVlcztcbiAgICBwcm9jZXNzZWREYXlzID0gcHJvY2Vzc2VkRGF5cy5maWx0ZXIoKGRheSkgPT4gZGF5ID49IG1pbkRheSAmJiBkYXkgPD0gbWF4RGF5KTtcbiAgICBwcm9jZXNzZWREYXlzLmZvckVhY2goKHByb2Nlc3NlZERheSkgPT4ge1xuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGAke21vbnRofS8ke3Byb2Nlc3NlZERheX0vJHt5ZWFyfSBHTVQrMDAwMGApO1xuICAgICAgY29uc3QgZGF5U3RyaW5nID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGZvcm1hdE9wdGlvbnMpLCB7IHRpbWVab25lOiAnVVRDJyB9KSkuZm9ybWF0KGRhdGUpO1xuICAgICAgZGF5cy5wdXNoKHsgdGV4dDogZGF5U3RyaW5nLCB2YWx1ZTogcHJvY2Vzc2VkRGF5IH0pO1xuICAgIH0pO1xuICB9XG4gIGVsc2Uge1xuICAgIGZvciAobGV0IGkgPSBtaW5EYXk7IGkgPD0gbWF4RGF5OyBpKyspIHtcbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShgJHttb250aH0vJHtpfS8ke3llYXJ9IEdNVCswMDAwYCk7XG4gICAgICBjb25zdCBkYXlTdHJpbmcgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZm9ybWF0T3B0aW9ucyksIHsgdGltZVpvbmU6ICdVVEMnIH0pKS5mb3JtYXQoZGF0ZSk7XG4gICAgICBkYXlzLnB1c2goeyB0ZXh0OiBkYXlTdHJpbmcsIHZhbHVlOiBpIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF5cztcbn07XG5jb25zdCBnZXRZZWFyQ29sdW1uRGF0YSA9IChyZWZQYXJ0cywgbWluUGFydHMsIG1heFBhcnRzLCB5ZWFyVmFsdWVzKSA9PiB7XG4gIGxldCBwcm9jZXNzZWRZZWFycyA9IFtdO1xuICBpZiAoeWVhclZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcHJvY2Vzc2VkWWVhcnMgPSB5ZWFyVmFsdWVzO1xuICAgIGlmICgobWF4UGFydHMgPT09IG51bGwgfHwgbWF4UGFydHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1heFBhcnRzLnllYXIpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHByb2Nlc3NlZFllYXJzID0gcHJvY2Vzc2VkWWVhcnMuZmlsdGVyKCh5ZWFyKSA9PiB5ZWFyIDw9IG1heFBhcnRzLnllYXIpO1xuICAgIH1cbiAgICBpZiAoKG1pblBhcnRzID09PSBudWxsIHx8IG1pblBhcnRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtaW5QYXJ0cy55ZWFyKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm9jZXNzZWRZZWFycyA9IHByb2Nlc3NlZFllYXJzLmZpbHRlcigoeWVhcikgPT4geWVhciA+PSBtaW5QYXJ0cy55ZWFyKTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgY29uc3QgeyB5ZWFyIH0gPSByZWZQYXJ0cztcbiAgICBjb25zdCBtYXhZZWFyID0gKG1heFBhcnRzID09PSBudWxsIHx8IG1heFBhcnRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtYXhQYXJ0cy55ZWFyKSB8fCB5ZWFyO1xuICAgIGNvbnN0IG1pblllYXIgPSAobWluUGFydHMgPT09IG51bGwgfHwgbWluUGFydHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1pblBhcnRzLnllYXIpIHx8IHllYXIgLSAxMDA7XG4gICAgZm9yIChsZXQgaSA9IG1heFllYXI7IGkgPj0gbWluWWVhcjsgaS0tKSB7XG4gICAgICBwcm9jZXNzZWRZZWFycy5wdXNoKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcHJvY2Vzc2VkWWVhcnMubWFwKCh5ZWFyKSA9PiAoe1xuICAgIHRleHQ6IGAke3llYXJ9YCxcbiAgICB2YWx1ZTogeWVhcixcbiAgfSkpO1xufTtcbi8qKlxuICogR2l2ZW4gYSBzdGFydGluZyBkYXRlIGFuZCBhbiB1cHBlciBib3VuZCxcbiAqIHRoaXMgZnVuY3Rpb25zIHJldHVybnMgYW4gYXJyYXkgb2YgYWxsXG4gKiBtb250aCBvYmplY3RzIGluIHRoYXQgcmFuZ2UuXG4gKi9cbmNvbnN0IGdldEFsbE1vbnRoc0luUmFuZ2UgPSAoY3VycmVudFBhcnRzLCBtYXhQYXJ0cykgPT4ge1xuICBpZiAoY3VycmVudFBhcnRzLm1vbnRoID09PSBtYXhQYXJ0cy5tb250aCAmJiBjdXJyZW50UGFydHMueWVhciA9PT0gbWF4UGFydHMueWVhcikge1xuICAgIHJldHVybiBbY3VycmVudFBhcnRzXTtcbiAgfVxuICByZXR1cm4gW2N1cnJlbnRQYXJ0cywgLi4uZ2V0QWxsTW9udGhzSW5SYW5nZShnZXROZXh0TW9udGgoY3VycmVudFBhcnRzKSwgbWF4UGFydHMpXTtcbn07XG4vKipcbiAqIENyZWF0ZXMgYW5kIHJldHVybnMgcGlja2VyIGl0ZW1zXG4gKiB0aGF0IHJlcHJlc2VudCB0aGUgZGF5cyBpbiBhIG1vbnRoLlxuICogRXhhbXBsZTogXCJUaHUsIEp1biAyXCJcbiAqL1xuY29uc3QgZ2V0Q29tYmluZWREYXRlQ29sdW1uRGF0YSA9IChsb2NhbGUsIHJlZlBhcnRzLCB0b2RheVBhcnRzLCBtaW5QYXJ0cywgbWF4UGFydHMsIGRheVZhbHVlcywgbW9udGhWYWx1ZXMpID0+IHtcbiAgbGV0IGl0ZW1zID0gW107XG4gIGxldCBwYXJ0cyA9IFtdO1xuICAvKipcbiAgICogR2V0IGFsbCBtb250aCBvYmplY3RzIGZyb20gdGhlIG1pbiBkYXRlXG4gICAqIHRvIHRoZSBtYXggZGF0ZS4gTm90ZTogRG8gbm90IHVzZSBnZXRNb250aENvbHVtbkRhdGFcbiAgICogYXMgdGhhdCBmdW5jdGlvbiBvbmx5IGdlbmVyYXRlcyBkYXRlcyB3aXRoaW4gYVxuICAgKiBzaW5nbGUgeWVhci5cbiAgICovXG4gIGxldCBtb250aHMgPSBnZXRBbGxNb250aHNJblJhbmdlKG1pblBhcnRzLCBtYXhQYXJ0cyk7XG4gIC8qKlxuICAgKiBGaWx0ZXIgb3V0IGFueSBkaXNhbGxvd2VkIG1vbnRoIHZhbHVlcy5cbiAgICovXG4gIGlmIChtb250aFZhbHVlcykge1xuICAgIG1vbnRocyA9IG1vbnRocy5maWx0ZXIoKHsgbW9udGggfSkgPT4gbW9udGhWYWx1ZXMuaW5jbHVkZXMobW9udGgpKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFsbCBvZiB0aGUgZGF5cyBpbiB0aGUgbW9udGguXG4gICAqIEZyb20gdGhlcmUsIGdlbmVyYXRlIGFuIGFycmF5IHdoZXJlXG4gICAqIGVhY2ggaXRlbSBoYXMgdGhlIG1vbnRoLCBkYXRlLCBhbmQgZGF5XG4gICAqIG9mIHdvcmsgYXMgdGhlIHRleHQuXG4gICAqL1xuICBtb250aHMuZm9yRWFjaCgobW9udGhPYmplY3QpID0+IHtcbiAgICBjb25zdCByZWZlcmVuY2VNb250aCA9IHsgbW9udGg6IG1vbnRoT2JqZWN0Lm1vbnRoLCBkYXk6IG51bGwsIHllYXI6IHJlZlBhcnRzLnllYXIgfTtcbiAgICBjb25zdCBtb250aERheXMgPSBnZXREYXlDb2x1bW5EYXRhKGxvY2FsZSwgcmVmZXJlbmNlTW9udGgsIG1pblBhcnRzLCBtYXhQYXJ0cywgZGF5VmFsdWVzLCB7XG4gICAgICBtb250aDogJ3Nob3J0JyxcbiAgICAgIGRheTogJ251bWVyaWMnLFxuICAgICAgd2Vla2RheTogJ3Nob3J0JyxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRlUGFydHMgPSBbXTtcbiAgICBjb25zdCBkYXRlQ29sdW1uSXRlbXMgPSBbXTtcbiAgICBtb250aERheXMuZm9yRWFjaCgoZGF5T2JqZWN0KSA9PiB7XG4gICAgICBjb25zdCBpc1RvZGF5ID0gaXNTYW1lRGF5KE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVmZXJlbmNlTW9udGgpLCB7IGRheTogZGF5T2JqZWN0LnZhbHVlIH0pLCB0b2RheVBhcnRzKTtcbiAgICAgIC8qKlxuICAgICAgICogVG9kYXkncyBkYXRlIHNob3VsZCByZWFkIGFzIFwiVG9kYXlcIiAobG9jYWxpemVkKVxuICAgICAgICogbm90IHRoZSBhY3R1YWwgZGF0ZSBzdHJpbmdcbiAgICAgICAqL1xuICAgICAgZGF0ZUNvbHVtbkl0ZW1zLnB1c2goe1xuICAgICAgICB0ZXh0OiBpc1RvZGF5ID8gZ2V0VG9kYXlMYWJlbChsb2NhbGUpIDogZGF5T2JqZWN0LnRleHQsXG4gICAgICAgIHZhbHVlOiBgJHtyZWZQYXJ0cy55ZWFyfS0ke21vbnRoT2JqZWN0Lm1vbnRofS0ke2RheU9iamVjdC52YWx1ZX1gLFxuICAgICAgfSk7XG4gICAgICAvKipcbiAgICAgICAqIFdoZW4gc2VsZWN0aW5nIGEgZGF0ZSBpbiB0aGUgd2hlZWwgcGlja2VyXG4gICAgICAgKiB3ZSBuZWVkIGFjY2VzcyB0byB0aGUgcmF3IGRhdGV0aW1lIHBhcnRzIGRhdGEuXG4gICAgICAgKiBUaGUgcGlja2VyIGNvbHVtbiBvbmx5IGFjY2VwdHMgdmFsdWVzIG9mXG4gICAgICAgKiB0eXBlIHN0cmluZyBvciBudW1iZXIsIHNvIHdlIG5lZWQgdG8gcmV0dXJuXG4gICAgICAgKiB0d28gc2V0cyBvZiBkYXRhOiBBIGRhdGEgc2V0IHRvIGJlIHBhc3NlZFxuICAgICAgICogdG8gdGhlIHBpY2tlciBjb2x1bW4sIGFuZCBhIGRhdGEgc2V0IHRvXG4gICAgICAgKiBiZSB1c2VkIHRvIHJlZmVyZW5jZSB0aGUgcmF3IGRhdGEgd2hlblxuICAgICAgICogdXBkYXRpbmcgdGhlIHBpY2tlciBjb2x1bW4gdmFsdWUuXG4gICAgICAgKi9cbiAgICAgIGRhdGVQYXJ0cy5wdXNoKHtcbiAgICAgICAgbW9udGg6IG1vbnRoT2JqZWN0Lm1vbnRoLFxuICAgICAgICB5ZWFyOiByZWZQYXJ0cy55ZWFyLFxuICAgICAgICBkYXk6IGRheU9iamVjdC52YWx1ZSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHBhcnRzID0gWy4uLnBhcnRzLCAuLi5kYXRlUGFydHNdO1xuICAgIGl0ZW1zID0gWy4uLml0ZW1zLCAuLi5kYXRlQ29sdW1uSXRlbXNdO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBwYXJ0cyxcbiAgICBpdGVtcyxcbiAgfTtcbn07XG5jb25zdCBnZXRUaW1lQ29sdW1uc0RhdGEgPSAobG9jYWxlLCByZWZQYXJ0cywgaG91ckN5Y2xlLCBtaW5QYXJ0cywgbWF4UGFydHMsIGFsbG93ZWRIb3VyVmFsdWVzLCBhbGxvd2VkTWludXRlVmF1ZXMpID0+IHtcbiAgY29uc3QgdXNlMjRIb3VyID0gaXMyNEhvdXIobG9jYWxlLCBob3VyQ3ljbGUpO1xuICBjb25zdCB7IGhvdXJzLCBtaW51dGVzLCBhbSwgcG0gfSA9IGdlbmVyYXRlVGltZShyZWZQYXJ0cywgdXNlMjRIb3VyID8gJ2gyMycgOiAnaDEyJywgbWluUGFydHMsIG1heFBhcnRzLCBhbGxvd2VkSG91clZhbHVlcywgYWxsb3dlZE1pbnV0ZVZhdWVzKTtcbiAgY29uc3QgaG91cnNJdGVtcyA9IGhvdXJzLm1hcCgoaG91cikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0ZXh0OiBnZXRGb3JtYXR0ZWRIb3VyKGhvdXIsIHVzZTI0SG91ciksXG4gICAgICB2YWx1ZTogZ2V0SW50ZXJuYWxIb3VyVmFsdWUoaG91ciwgdXNlMjRIb3VyLCByZWZQYXJ0cy5hbXBtKSxcbiAgICB9O1xuICB9KTtcbiAgY29uc3QgbWludXRlc0l0ZW1zID0gbWludXRlcy5tYXAoKG1pbnV0ZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0ZXh0OiBhZGRUaW1lUGFkZGluZyhtaW51dGUpLFxuICAgICAgdmFsdWU6IG1pbnV0ZSxcbiAgICB9O1xuICB9KTtcbiAgY29uc3QgZGF5UGVyaW9kSXRlbXMgPSBbXTtcbiAgaWYgKGFtICYmICF1c2UyNEhvdXIpIHtcbiAgICBkYXlQZXJpb2RJdGVtcy5wdXNoKHtcbiAgICAgIHRleHQ6IGdldExvY2FsaXplZERheVBlcmlvZChsb2NhbGUsICdhbScpLFxuICAgICAgdmFsdWU6ICdhbScsXG4gICAgfSk7XG4gIH1cbiAgaWYgKHBtICYmICF1c2UyNEhvdXIpIHtcbiAgICBkYXlQZXJpb2RJdGVtcy5wdXNoKHtcbiAgICAgIHRleHQ6IGdldExvY2FsaXplZERheVBlcmlvZChsb2NhbGUsICdwbScpLFxuICAgICAgdmFsdWU6ICdwbScsXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtaW51dGVzRGF0YTogbWludXRlc0l0ZW1zLFxuICAgIGhvdXJzRGF0YTogaG91cnNJdGVtcyxcbiAgICBkYXlQZXJpb2REYXRhOiBkYXlQZXJpb2RJdGVtcyxcbiAgfTtcbn07XG5cbmNvbnN0IElTT184NjAxX1JFR0VYUCA9IFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4vXihcXGR7NH18WytcXC1dXFxkezZ9KSg/Oi0oXFxkezJ9KSg/Oi0oXFxkezJ9KSk/KT8oPzpUKFxcZHsyfSk6KFxcZHsyfSkoPzo6KFxcZHsyfSkoPzpcXC4oXFxkezN9KSk/KT8oPzooWil8KFsrXFwtXSkoXFxkezJ9KSg/OjooXFxkezJ9KSk/KT8pPyQvO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5jb25zdCBUSU1FX1JFR0VYUCA9IC9eKChcXGR7Mn0pOihcXGR7Mn0pKD86OihcXGR7Mn0pKD86XFwuKFxcZHszfSkpPyk/KD86KFopfChbK1xcLV0pKFxcZHsyfSkoPzo6KFxcZHsyfSkpPyk/KT8kLztcbi8qKlxuICogVXNlIHRvIGNvbnZlcnQgYSBzdHJpbmcgb2YgY29tbWEgc2VwYXJhdGVkIG51bWJlcnMgb3JcbiAqIGFuIGFycmF5IG9mIG51bWJlcnMsIGFuZCBjbGVhbiB1cCBhbnkgdXNlciBpbnB1dFxuICovXG5jb25zdCBjb252ZXJ0VG9BcnJheU9mTnVtYmVycyA9IChpbnB1dCkgPT4ge1xuICBpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgcHJvY2Vzc2VkSW5wdXQgPSBpbnB1dDtcbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBjb252ZXJ0IHRoZSBzdHJpbmcgdG8gYW4gYXJyYXkgb2Ygc3RyaW5nc1xuICAgIC8vIGF1dG8gcmVtb3ZlIGFueSB3aGl0ZXNwYWNlIGFuZCBbXSBjaGFyYWN0ZXJzXG4gICAgcHJvY2Vzc2VkSW5wdXQgPSBpbnB1dC5yZXBsYWNlKC9cXFt8XFxdfFxccy9nLCAnJykuc3BsaXQoJywnKTtcbiAgfVxuICBsZXQgdmFsdWVzO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9jZXNzZWRJbnB1dCkpIHtcbiAgICAvLyBlbnN1cmUgZWFjaCB2YWx1ZSBpcyBhbiBhY3R1YWwgbnVtYmVyIGluIHRoZSByZXR1cm5lZCBhcnJheVxuICAgIHZhbHVlcyA9IHByb2Nlc3NlZElucHV0Lm1hcCgobnVtKSA9PiBwYXJzZUludChudW0sIDEwKSkuZmlsdGVyKGlzRmluaXRlKTtcbiAgfVxuICBlbHNlIHtcbiAgICB2YWx1ZXMgPSBbcHJvY2Vzc2VkSW5wdXRdO1xuICB9XG4gIHJldHVybiB2YWx1ZXM7XG59O1xuLyoqXG4gKiBFeHRyYWN0cyBkYXRlIGluZm9ybWF0aW9uXG4gKiBmcm9tIGEgLmNhbGVuZGFyLWRheSBlbGVtZW50XG4gKiBpbnRvIERhdGV0aW1lUGFydHMuXG4gKi9cbmNvbnN0IGdldFBhcnRzRnJvbUNhbGVuZGFyRGF5ID0gKGVsKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbW9udGg6IHBhcnNlSW50KGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1tb250aCcpLCAxMCksXG4gICAgZGF5OiBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF5JyksIDEwKSxcbiAgICB5ZWFyOiBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEteWVhcicpLCAxMCksXG4gICAgZGF5T2ZXZWVrOiBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF5LW9mLXdlZWsnKSwgMTApLFxuICB9O1xufTtcbmZ1bmN0aW9uIHBhcnNlRGF0ZSh2YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgIHJldHVybiB2YWwubWFwKCh2YWxTdHIpID0+IHBhcnNlRGF0ZSh2YWxTdHIpKTtcbiAgfVxuICAvLyBtYW51YWxseSBwYXJzZSBJUzAgY3V6IERhdGUucGFyc2UgY2Fubm90IGJlIHRydXN0ZWRcbiAgLy8gSVNPIDg2MDEgZm9ybWF0OiAxOTk0LTEyLTE1VDEzOjQ3OjIwWlxuICBsZXQgcGFyc2UgPSBudWxsO1xuICBpZiAodmFsICE9IG51bGwgJiYgdmFsICE9PSAnJykge1xuICAgIC8vIHRyeSBwYXJzaW5nIGZvciBqdXN0IHRpbWUgZmlyc3QsIEhIOk1NXG4gICAgcGFyc2UgPSBUSU1FX1JFR0VYUC5leGVjKHZhbCk7XG4gICAgaWYgKHBhcnNlKSB7XG4gICAgICAvLyBhZGp1c3QgdGhlIGFycmF5IHNvIGl0IGZpdHMgbmljZWx5IHdpdGggdGhlIGRhdGV0aW1lIHBhcnNlXG4gICAgICBwYXJzZS51bnNoaWZ0KHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgIHBhcnNlWzJdID0gcGFyc2VbM10gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gdHJ5IHBhcnNpbmcgZm9yIGZ1bGwgSVNPIGRhdGV0aW1lXG4gICAgICBwYXJzZSA9IElTT184NjAxX1JFR0VYUC5leGVjKHZhbCk7XG4gICAgfVxuICB9XG4gIGlmIChwYXJzZSA9PT0gbnVsbCkge1xuICAgIC8vIHdhc24ndCBhYmxlIHRvIHBhcnNlIHRoZSBJU08gZGF0ZXRpbWVcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIC8vIGVuc3VyZSBhbGwgdGhlIHBhcnNlIHZhbHVlcyBleGlzdCB3aXRoIGF0IGxlYXN0IDBcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCA4OyBpKyspIHtcbiAgICBwYXJzZVtpXSA9IHBhcnNlW2ldICE9PSB1bmRlZmluZWQgPyBwYXJzZUludChwYXJzZVtpXSwgMTApIDogdW5kZWZpbmVkO1xuICB9XG4gIGxldCB0ek9mZnNldCA9IDA7XG4gIGlmIChwYXJzZVs5XSAmJiBwYXJzZVsxMF0pIHtcbiAgICAvLyBob3Vyc1xuICAgIHR6T2Zmc2V0ID0gcGFyc2VJbnQocGFyc2VbMTBdLCAxMCkgKiA2MDtcbiAgICBpZiAocGFyc2VbMTFdKSB7XG4gICAgICAvLyBtaW51dGVzXG4gICAgICB0ek9mZnNldCArPSBwYXJzZUludChwYXJzZVsxMV0sIDEwKTtcbiAgICB9XG4gICAgaWYgKHBhcnNlWzldID09PSAnLScpIHtcbiAgICAgIC8vICsgb3IgLVxuICAgICAgdHpPZmZzZXQgKj0gLTE7XG4gICAgfVxuICB9XG4gIC8vIGNhbiBhbHNvIGdldCBzZWNvbmQgYW5kIG1pbGxpc2Vjb25kIGZyb20gcGFyc2VbNl0gYW5kIHBhcnNlWzddIGlmIG5lZWRlZFxuICByZXR1cm4ge1xuICAgIHllYXI6IHBhcnNlWzFdLFxuICAgIG1vbnRoOiBwYXJzZVsyXSxcbiAgICBkYXk6IHBhcnNlWzNdLFxuICAgIGhvdXI6IHBhcnNlWzRdLFxuICAgIG1pbnV0ZTogcGFyc2VbNV0sXG4gICAgdHpPZmZzZXQsXG4gIH07XG59XG5jb25zdCBjbGFtcERhdGUgPSAoZGF0ZVBhcnRzLCBtaW5QYXJ0cywgbWF4UGFydHMpID0+IHtcbiAgaWYgKG1pblBhcnRzICYmIGlzQmVmb3JlKGRhdGVQYXJ0cywgbWluUGFydHMpKSB7XG4gICAgcmV0dXJuIG1pblBhcnRzO1xuICB9XG4gIGVsc2UgaWYgKG1heFBhcnRzICYmIGlzQWZ0ZXIoZGF0ZVBhcnRzLCBtYXhQYXJ0cykpIHtcbiAgICByZXR1cm4gbWF4UGFydHM7XG4gIH1cbiAgcmV0dXJuIGRhdGVQYXJ0cztcbn07XG4vKipcbiAqIFBhcnNlcyBhbiBob3VyIGFuZCByZXR1cm5zIGlmIHRoZSB2YWx1ZSBpcyBpbiB0aGUgbW9ybmluZyAoYW0pIG9yIGFmdGVybm9vbiAocG0pLlxuICogQHBhcmFtIGhvdXIgVGhlIGhvdXIgdG8gZm9ybWF0LCBzaG91bGQgYmUgMC0yM1xuICogQHJldHVybnMgYHBtYCBpZiB0aGUgaG91ciBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMTIsIGBhbWAgaWYgbGVzcyB0aGFuIDEyLlxuICovXG5jb25zdCBwYXJzZUFtUG0gPSAoaG91cikgPT4ge1xuICByZXR1cm4gaG91ciA+PSAxMiA/ICdwbScgOiAnYW0nO1xufTtcbi8qKlxuICogVGFrZXMgYSBtYXggZGF0ZSBzdHJpbmcgYW5kIGNyZWF0ZXMgYSBEYXRldGltZVBhcnRzXG4gKiBvYmplY3QsIGZpbGxpbmcgaW4gYW55IG1pc3NpbmcgaW5mb3JtYXRpb24uXG4gKiBGb3IgZXhhbXBsZSwgbWF4PVwiMjAxMlwiIHdvdWxkIGZpbGwgaW4gdGhlIG1pc3NpbmdcbiAqIG1vbnRoLCBkYXksIGhvdXIsIGFuZCBtaW51dGUgaW5mb3JtYXRpb24uXG4gKi9cbmNvbnN0IHBhcnNlTWF4UGFydHMgPSAobWF4LCB0b2RheVBhcnRzKSA9PiB7XG4gIGNvbnN0IHsgbW9udGgsIGRheSwgeWVhciwgaG91ciwgbWludXRlIH0gPSBwYXJzZURhdGUobWF4KTtcbiAgLyoqXG4gICAqIFdoZW4gcGFzc2luZyBpbiBgbWF4YCBvciBgbWluYCwgZGV2ZWxvcGVyc1xuICAgKiBjYW4gcGFzcyBpbiBhbnkgSVNPLTg2MDEgc3RyaW5nLiBUaGlzIG1lYW5zXG4gICAqIHRoYXQgbm90IGFsbCBvZiB0aGUgZGF0ZS90aW1lIGZpZWxkcyBhcmUgZGVmaW5lZC5cbiAgICogRm9yIGV4YW1wbGUsIHBhc3NpbmcgbWF4PVwiMjAxMlwiIGlzIHZhbGlkIGV2ZW4gdGhvdWdoXG4gICAqIHRoZXJlIGlzIG5vIG1vbnRoLCBkYXksIGhvdXIsIG9yIG1pbnV0ZSBkYXRhLlxuICAgKiBIb3dldmVyLCBhbGwgb2YgdGhpcyBkYXRhIGlzIHJlcXVpcmVkIHdoZW4gY2xhbXBpbmcgdGhlIGRhdGVcbiAgICogc28gdGhhdCB0aGUgY29ycmVjdCBpbml0aWFsIHZhbHVlIGNhbiBiZSBzZWxlY3RlZC4gQXMgYSByZXN1bHQsXG4gICAqIHdlIG5lZWQgdG8gZmlsbCBpbiBhbnkgb21pdHRlZCBkYXRhIHdpdGggdGhlIG1pbiBvciBtYXggdmFsdWVzLlxuICAgKi9cbiAgY29uc3QgeWVhclZhbHVlID0geWVhciAhPT0gbnVsbCAmJiB5ZWFyICE9PSB2b2lkIDAgPyB5ZWFyIDogdG9kYXlQYXJ0cy55ZWFyO1xuICBjb25zdCBtb250aFZhbHVlID0gbW9udGggIT09IG51bGwgJiYgbW9udGggIT09IHZvaWQgMCA/IG1vbnRoIDogMTI7XG4gIHJldHVybiB7XG4gICAgbW9udGg6IG1vbnRoVmFsdWUsXG4gICAgZGF5OiBkYXkgIT09IG51bGwgJiYgZGF5ICE9PSB2b2lkIDAgPyBkYXkgOiBnZXROdW1EYXlzSW5Nb250aChtb250aFZhbHVlLCB5ZWFyVmFsdWUpLFxuICAgIC8qKlxuICAgICAqIFBhc3NpbmcgaW4gXCJISDptbVwiIGlzIGEgdmFsaWQgSVNPLTg2MDFcbiAgICAgKiBzdHJpbmcsIHNvIHdlIGp1c3QgZGVmYXVsdCB0byB0aGUgY3VycmVudCB5ZWFyXG4gICAgICogaW4gdGhpcyBjYXNlLlxuICAgICAqL1xuICAgIHllYXI6IHllYXJWYWx1ZSxcbiAgICBob3VyOiBob3VyICE9PSBudWxsICYmIGhvdXIgIT09IHZvaWQgMCA/IGhvdXIgOiAyMyxcbiAgICBtaW51dGU6IG1pbnV0ZSAhPT0gbnVsbCAmJiBtaW51dGUgIT09IHZvaWQgMCA/IG1pbnV0ZSA6IDU5LFxuICB9O1xufTtcbi8qKlxuICogVGFrZXMgYSBtaW4gZGF0ZSBzdHJpbmcgYW5kIGNyZWF0ZXMgYSBEYXRldGltZVBhcnRzXG4gKiBvYmplY3QsIGZpbGxpbmcgaW4gYW55IG1pc3NpbmcgaW5mb3JtYXRpb24uXG4gKiBGb3IgZXhhbXBsZSwgbWluPVwiMjAxMlwiIHdvdWxkIGZpbGwgaW4gdGhlIG1pc3NpbmdcbiAqIG1vbnRoLCBkYXksIGhvdXIsIGFuZCBtaW51dGUgaW5mb3JtYXRpb24uXG4gKi9cbmNvbnN0IHBhcnNlTWluUGFydHMgPSAobWluLCB0b2RheVBhcnRzKSA9PiB7XG4gIGNvbnN0IHsgbW9udGgsIGRheSwgeWVhciwgaG91ciwgbWludXRlIH0gPSBwYXJzZURhdGUobWluKTtcbiAgLyoqXG4gICAqIFdoZW4gcGFzc2luZyBpbiBgbWF4YCBvciBgbWluYCwgZGV2ZWxvcGVyc1xuICAgKiBjYW4gcGFzcyBpbiBhbnkgSVNPLTg2MDEgc3RyaW5nLiBUaGlzIG1lYW5zXG4gICAqIHRoYXQgbm90IGFsbCBvZiB0aGUgZGF0ZS90aW1lIGZpZWxkcyBhcmUgZGVmaW5lZC5cbiAgICogRm9yIGV4YW1wbGUsIHBhc3NpbmcgbWF4PVwiMjAxMlwiIGlzIHZhbGlkIGV2ZW4gdGhvdWdoXG4gICAqIHRoZXJlIGlzIG5vIG1vbnRoLCBkYXksIGhvdXIsIG9yIG1pbnV0ZSBkYXRhLlxuICAgKiBIb3dldmVyLCBhbGwgb2YgdGhpcyBkYXRhIGlzIHJlcXVpcmVkIHdoZW4gY2xhbXBpbmcgdGhlIGRhdGVcbiAgICogc28gdGhhdCB0aGUgY29ycmVjdCBpbml0aWFsIHZhbHVlIGNhbiBiZSBzZWxlY3RlZC4gQXMgYSByZXN1bHQsXG4gICAqIHdlIG5lZWQgdG8gZmlsbCBpbiBhbnkgb21pdHRlZCBkYXRhIHdpdGggdGhlIG1pbiBvciBtYXggdmFsdWVzLlxuICAgKi9cbiAgcmV0dXJuIHtcbiAgICBtb250aDogbW9udGggIT09IG51bGwgJiYgbW9udGggIT09IHZvaWQgMCA/IG1vbnRoIDogMSxcbiAgICBkYXk6IGRheSAhPT0gbnVsbCAmJiBkYXkgIT09IHZvaWQgMCA/IGRheSA6IDEsXG4gICAgLyoqXG4gICAgICogUGFzc2luZyBpbiBcIkhIOm1tXCIgaXMgYSB2YWxpZCBJU08tODYwMVxuICAgICAqIHN0cmluZywgc28gd2UganVzdCBkZWZhdWx0IHRvIHRoZSBjdXJyZW50IHllYXJcbiAgICAgKiBpbiB0aGlzIGNhc2UuXG4gICAgICovXG4gICAgeWVhcjogeWVhciAhPT0gbnVsbCAmJiB5ZWFyICE9PSB2b2lkIDAgPyB5ZWFyIDogdG9kYXlQYXJ0cy55ZWFyLFxuICAgIGhvdXI6IGhvdXIgIT09IG51bGwgJiYgaG91ciAhPT0gdm9pZCAwID8gaG91ciA6IDAsXG4gICAgbWludXRlOiBtaW51dGUgIT09IG51bGwgJiYgbWludXRlICE9PSB2b2lkIDAgPyBtaW51dGUgOiAwLFxuICB9O1xufTtcblxuZXhwb3J0IHsgaXNMb2NhbGVEYXlQZXJpb2RSVEwgYXMgQSwgZ2V0RGF5c09mV2VlayBhcyBCLCBnZXRNb250aEFuZFllYXIgYXMgQywgZ2V0RGF5c09mTW9udGggYXMgRCwgZ2VuZXJhdGVNb250aHMgYXMgRSwgaXMyNEhvdXIgYXMgRiwgZ2V0TG9jYWxpemVkVGltZSBhcyBHLCBnZXRNb250aEFuZERheSBhcyBILCBmb3JtYXRWYWx1ZSBhcyBJLCBnZXROZXh0WWVhciBhcyBKLCBnZXRQcmV2aW91c1llYXIgYXMgSywgY2xhbXBEYXRlIGFzIEwsIHBhcnNlQW1QbSBhcyBNLCBjYWxjdWxhdGVIb3VyRnJvbUFNUE0gYXMgTiwgZ2V0TG9jYWxpemVkRGF0ZVRpbWUgYXMgTywgZ2V0TW9udGhEYXlBbmRZZWFyIGFzIFAsIGlzQWZ0ZXIgYXMgYSwgaXNTYW1lRGF5IGFzIGIsIGdldFByZXZpb3VzTW9udGggYXMgYywgZ2V0TmV4dE1vbnRoIGFzIGQsIGdldFRvZGF5IGFzIGUsIGdldFBhcnRzRnJvbUNhbGVuZGFyRGF5IGFzIGYsIGdlbmVyYXRlRGF5QXJpYUxhYmVsIGFzIGcsIGdldEVuZE9mV2VlayBhcyBoLCBpc0JlZm9yZSBhcyBpLCBnZXRTdGFydE9mV2VlayBhcyBqLCBnZXRQcmV2aW91c0RheSBhcyBrLCBnZXROZXh0RGF5IGFzIGwsIGdldFByZXZpb3VzV2VlayBhcyBtLCBnZXROZXh0V2VlayBhcyBuLCBwYXJzZU1pblBhcnRzIGFzIG8sIHBhcnNlRGF0ZSBhcyBwLCBwYXJzZU1heFBhcnRzIGFzIHEsIGNvbnZlcnRUb0FycmF5T2ZOdW1iZXJzIGFzIHIsIGNvbnZlcnREYXRhVG9JU08gYXMgcywgZ2V0Q29tYmluZWREYXRlQ29sdW1uRGF0YSBhcyB0LCBnZXRNb250aENvbHVtbkRhdGEgYXMgdSwgZ2V0RGF5Q29sdW1uRGF0YSBhcyB2LCB3YXJuSWZWYWx1ZU91dE9mQm91bmRzIGFzIHcsIGdldFllYXJDb2x1bW5EYXRhIGFzIHgsIGlzTW9udGhGaXJzdExvY2FsZSBhcyB5LCBnZXRUaW1lQ29sdW1uc0RhdGEgYXMgeiB9O1xuIiwiLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9cbmNvbnN0IGhvc3RDb250ZXh0ID0gKHNlbGVjdG9yLCBlbCkgPT4ge1xuICByZXR1cm4gZWwuY2xvc2VzdChzZWxlY3RvcikgIT09IG51bGw7XG59O1xuLyoqXG4gKiBDcmVhdGUgdGhlIG1vZGUgYW5kIGNvbG9yIGNsYXNzZXMgZm9yIHRoZSBjb21wb25lbnQgYmFzZWQgb24gdGhlIGNsYXNzZXMgcGFzc2VkIGluXG4gKi9cbmNvbnN0IGNyZWF0ZUNvbG9yQ2xhc3NlcyA9IChjb2xvciwgY3NzQ2xhc3NNYXApID0+IHtcbiAgcmV0dXJuIHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycgJiYgY29sb3IubGVuZ3RoID4gMFxuICAgID8gT2JqZWN0LmFzc2lnbih7ICdpb24tY29sb3InOiB0cnVlLCBbYGlvbi1jb2xvci0ke2NvbG9yfWBdOiB0cnVlIH0sIGNzc0NsYXNzTWFwKSA6IGNzc0NsYXNzTWFwO1xufTtcbmNvbnN0IGdldENsYXNzTGlzdCA9IChjbGFzc2VzKSA9PiB7XG4gIGlmIChjbGFzc2VzICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBhcnJheSA9IEFycmF5LmlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogY2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIHJldHVybiBhcnJheVxuICAgICAgLmZpbHRlcigoYykgPT4gYyAhPSBudWxsKVxuICAgICAgLm1hcCgoYykgPT4gYy50cmltKCkpXG4gICAgICAuZmlsdGVyKChjKSA9PiBjICE9PSAnJyk7XG4gIH1cbiAgcmV0dXJuIFtdO1xufTtcbmNvbnN0IGdldENsYXNzTWFwID0gKGNsYXNzZXMpID0+IHtcbiAgY29uc3QgbWFwID0ge307XG4gIGdldENsYXNzTGlzdChjbGFzc2VzKS5mb3JFYWNoKChjKSA9PiAobWFwW2NdID0gdHJ1ZSkpO1xuICByZXR1cm4gbWFwO1xufTtcbmNvbnN0IFNDSEVNRSA9IC9eW2Etel1bYS16MC05K1xcLS5dKjovO1xuY29uc3Qgb3BlblVSTCA9IGFzeW5jICh1cmwsIGV2LCBkaXJlY3Rpb24sIGFuaW1hdGlvbikgPT4ge1xuICBpZiAodXJsICE9IG51bGwgJiYgdXJsWzBdICE9PSAnIycgJiYgIVNDSEVNRS50ZXN0KHVybCkpIHtcbiAgICBjb25zdCByb3V0ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpb24tcm91dGVyJyk7XG4gICAgaWYgKHJvdXRlcikge1xuICAgICAgaWYgKGV2ICE9IG51bGwpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByb3V0ZXIucHVzaCh1cmwsIGRpcmVjdGlvbiwgYW5pbWF0aW9uKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlQ29sb3JDbGFzc2VzIGFzIGMsIGdldENsYXNzTWFwIGFzIGcsIGhvc3RDb250ZXh0IGFzIGgsIG9wZW5VUkwgYXMgbyB9O1xuIl0sIm5hbWVzIjpbInByaW50SW9uV2FybmluZyIsIm1lc3NhZ2UiLCJwYXJhbXMiLCJjb25zb2xlIiwid2FybiIsInByaW50SW9uRXJyb3IiLCJlcnJvciIsInByaW50UmVxdWlyZWRFbGVtZW50RXJyb3IiLCJlbCIsInRhcmdldFNlbGVjdG9ycyIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsImpvaW4iLCJhIiwiYiIsInAiLCJpc1NhbWVEYXkiLCJiYXNlUGFydHMiLCJjb21wYXJlUGFydHMiLCJtb250aCIsImRheSIsInllYXIiLCJpc0JlZm9yZSIsImlzQWZ0ZXIiLCJ3YXJuSWZWYWx1ZU91dE9mQm91bmRzIiwidmFsdWUiLCJtaW4iLCJtYXgiLCJ2YWx1ZUFycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwidmFsIiwiSlNPTiIsInN0cmluZ2lmeSIsImlzTGVhcFllYXIiLCJpczI0SG91ciIsImxvY2FsZSIsImhvdXJDeWNsZSIsInVuZGVmaW5lZCIsImZvcm1hdHRlZCIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsImhvdXIiLCJvcHRpb25zIiwicmVzb2x2ZWRPcHRpb25zIiwiZGF0ZSIsIkRhdGUiLCJwYXJ0cyIsImZvcm1hdFRvUGFydHMiLCJmaW5kIiwidHlwZSIsIkVycm9yIiwiZ2V0TnVtRGF5c0luTW9udGgiLCJpc01vbnRoRmlyc3RMb2NhbGUiLCJmb3JtYXRPcHRpb25zIiwiaXNMb2NhbGVEYXlQZXJpb2RSVEwiLCJ0d29EaWdpdCIsIk1hdGgiLCJhYnMiLCJzbGljZSIsImZvdXJEaWdpdCIsImNvbnZlcnREYXRhVG9JU08iLCJkYXRhIiwibWFwIiwicnRuIiwibWludXRlIiwidHpPZmZzZXQiLCJmbG9vciIsImNvbnZlcnQxMkhvdXJUbzI0SG91ciIsImFtcG0iLCJnZXRTdGFydE9mV2VlayIsInJlZlBhcnRzIiwiZGF5T2ZXZWVrIiwic3VidHJhY3REYXlzIiwiZ2V0RW5kT2ZXZWVrIiwiYWRkRGF5cyIsImdldE5leHREYXkiLCJnZXRQcmV2aW91c0RheSIsImdldFByZXZpb3VzV2VlayIsImdldE5leHRXZWVrIiwibnVtRGF5cyIsIndvcmtpbmdQYXJ0cyIsImRheXNJbk1vbnRoIiwiZ2V0UHJldmlvdXNNb250aCIsIm51bURheXNJbk1vbnRoIiwiZ2V0TmV4dE1vbnRoIiwiY2hhbmdlWWVhciIsInllYXJEZWx0YSIsImdldFByZXZpb3VzWWVhciIsImdldE5leHRZZWFyIiwiZ2V0SW50ZXJuYWxIb3VyVmFsdWUiLCJ1c2UyNEhvdXIiLCJjYWxjdWxhdGVIb3VyRnJvbUFNUE0iLCJjdXJyZW50UGFydHMiLCJuZXdBTVBNIiwiY3VycmVudEFNUE0iLCJuZXdIb3VyIiwiZ2V0Rm9ybWF0dGVkRGF5UGVyaW9kIiwiZGF5UGVyaW9kIiwidG9VcHBlckNhc2UiLCJnZXRMb2NhbGl6ZWRUaW1lIiwidGltZVpvbmUiLCJob3VyMTIiLCJmb3JtYXQiLCJPYmplY3QiLCJhc3NpZ24iLCJhZGRUaW1lUGFkZGluZyIsInZhbHVlVG9TdHJpbmciLCJ0b1N0cmluZyIsImxlbmd0aCIsImdldEZvcm1hdHRlZEhvdXIiLCJnZW5lcmF0ZURheUFyaWFMYWJlbCIsInRvZGF5IiwibGFiZWxTdHJpbmciLCJ3ZWVrZGF5IiwiZ2V0TW9udGhBbmREYXkiLCJnZXRNb250aEFuZFllYXIiLCJnZXRNb250aERheUFuZFllYXIiLCJnZXRMb2NhbGl6ZWREYXRlVGltZSIsInRpbWVTdHJpbmciLCJnZXRUb2RheUxhYmVsIiwibGFiZWwiLCJSZWxhdGl2ZVRpbWVGb3JtYXQiLCJudW1lcmljIiwiY2hhckF0IiwicmVtb3ZlRGF0ZVR6T2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsIkRBVEVfQU0iLCJEQVRFX1BNIiwiZ2V0TG9jYWxpemVkRGF5UGVyaW9kIiwibG9jYWxpemVkRGF5UGVyaW9kIiwicGFydCIsImZvcm1hdFZhbHVlIiwiZ2V0VG9kYXkiLCJ0b0lTT1N0cmluZyIsIm1pbnV0ZXMiLCJob3VyMjMiLCJnZXREYXlzT2ZXZWVrIiwibW9kZSIsImZpcnN0RGF5T2ZXZWVrIiwid2Vla2RheUZvcm1hdCIsImludGwiLCJzdGFydERhdGUiLCJkYXlzT2ZXZWVrIiwiaSIsImN1cnJlbnREYXRlIiwic2V0RGF0ZSIsImdldERhdGUiLCJwdXNoIiwiZ2V0RGF5c09mTW9udGgiLCJmaXJzdE9mTW9udGgiLCJnZXREYXkiLCJvZmZzZXQiLCJkYXlzIiwiZ2VuZXJhdGVUaW1lIiwibWluUGFydHMiLCJtYXhQYXJ0cyIsImhvdXJWYWx1ZXMiLCJtaW51dGVWYWx1ZXMiLCJwcm9jZXNzZWRIb3VycyIsInByb2Nlc3NlZE1pbnV0ZXMiLCJpc0FNQWxsb3dlZCIsImlzUE1BbGxvd2VkIiwiZmlsdGVyIiwiaW5jbHVkZXMiLCJjb252ZXJ0ZWRIb3VyIiwiaXNQYXN0TWluSG91ciIsImhvdXJzIiwiYW0iLCJwbSIsImdlbmVyYXRlTW9udGhzIiwiZ2V0TW9udGhDb2x1bW5EYXRhIiwibW9udGhWYWx1ZXMiLCJtb250aHMiLCJwcm9jZXNzZWRNb250aHMiLCJmb3JFYWNoIiwicHJvY2Vzc2VkTW9udGgiLCJtb250aFN0cmluZyIsInRleHQiLCJtYXhNb250aCIsIm1pbk1vbnRoIiwiZ2V0RGF5Q29sdW1uRGF0YSIsImRheVZhbHVlcyIsIm1heERheSIsIm1pbkRheSIsInByb2Nlc3NlZERheXMiLCJwcm9jZXNzZWREYXkiLCJkYXlTdHJpbmciLCJnZXRZZWFyQ29sdW1uRGF0YSIsInllYXJWYWx1ZXMiLCJwcm9jZXNzZWRZZWFycyIsIm1heFllYXIiLCJtaW5ZZWFyIiwiZ2V0QWxsTW9udGhzSW5SYW5nZSIsImdldENvbWJpbmVkRGF0ZUNvbHVtbkRhdGEiLCJ0b2RheVBhcnRzIiwiaXRlbXMiLCJtb250aE9iamVjdCIsInJlZmVyZW5jZU1vbnRoIiwibW9udGhEYXlzIiwiZGF0ZVBhcnRzIiwiZGF0ZUNvbHVtbkl0ZW1zIiwiZGF5T2JqZWN0IiwiaXNUb2RheSIsImdldFRpbWVDb2x1bW5zRGF0YSIsImFsbG93ZWRIb3VyVmFsdWVzIiwiYWxsb3dlZE1pbnV0ZVZhdWVzIiwiaG91cnNJdGVtcyIsIm1pbnV0ZXNJdGVtcyIsImRheVBlcmlvZEl0ZW1zIiwibWludXRlc0RhdGEiLCJob3Vyc0RhdGEiLCJkYXlQZXJpb2REYXRhIiwiSVNPXzg2MDFfUkVHRVhQIiwiVElNRV9SRUdFWFAiLCJjb252ZXJ0VG9BcnJheU9mTnVtYmVycyIsImlucHV0IiwicHJvY2Vzc2VkSW5wdXQiLCJyZXBsYWNlIiwic3BsaXQiLCJ2YWx1ZXMiLCJudW0iLCJwYXJzZUludCIsImlzRmluaXRlIiwiZ2V0UGFydHNGcm9tQ2FsZW5kYXJEYXkiLCJnZXRBdHRyaWJ1dGUiLCJwYXJzZURhdGUiLCJ2YWxTdHIiLCJwYXJzZSIsImV4ZWMiLCJ1bnNoaWZ0IiwiY2xhbXBEYXRlIiwicGFyc2VBbVBtIiwicGFyc2VNYXhQYXJ0cyIsInllYXJWYWx1ZSIsIm1vbnRoVmFsdWUiLCJwYXJzZU1pblBhcnRzIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiRyIsIkgiLCJJIiwiSiIsIksiLCJMIiwiTSIsIk4iLCJPIiwiUCIsImMiLCJkIiwiZSIsImYiLCJnIiwiaCIsImoiLCJrIiwibCIsIm0iLCJuIiwibyIsInEiLCJyIiwicyIsInQiLCJ1IiwidiIsInciLCJ4IiwieSIsInoiLCJob3N0Q29udGV4dCIsInNlbGVjdG9yIiwiY2xvc2VzdCIsImNyZWF0ZUNvbG9yQ2xhc3NlcyIsImNvbG9yIiwiY3NzQ2xhc3NNYXAiLCJnZXRDbGFzc0xpc3QiLCJjbGFzc2VzIiwiYXJyYXkiLCJ0cmltIiwiZ2V0Q2xhc3NNYXAiLCJTQ0hFTUUiLCJvcGVuVVJMIiwidXJsIiwiZXYiLCJkaXJlY3Rpb24iLCJhbmltYXRpb24iLCJ0ZXN0Iiwicm91dGVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicHJldmVudERlZmF1bHQiXSwic291cmNlUm9vdCI6IndlYnBhY2s6Ly8vIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzAsMSwyXX0=